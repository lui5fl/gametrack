// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: IGDBProto.proto
//
// For information on using the generated types, please see the documenation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that your are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

public enum Proto_AchievementCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case achievementCategoryNull // = 0
  case playstation // = 1
  case xbox // = 2
  case steam // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .achievementCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .achievementCategoryNull
    case 1: self = .playstation
    case 2: self = .xbox
    case 3: self = .steam
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .achievementCategoryNull: return 0
    case .playstation: return 1
    case .xbox: return 2
    case .steam: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_AchievementCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_AchievementCategoryEnum] = [
    .achievementCategoryNull,
    .playstation,
    .xbox,
    .steam,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_RegionLanguageEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case regionLanguageNull // = 0
  case europe // = 1
  case northAmerica // = 2
  case australia // = 3
  case newZeland // = 4
  case japan // = 5
  case china // = 6
  case asia // = 7
  case worldwide // = 8
  case hongKong // = 9
  case southKorea // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .regionLanguageNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .regionLanguageNull
    case 1: self = .europe
    case 2: self = .northAmerica
    case 3: self = .australia
    case 4: self = .newZeland
    case 5: self = .japan
    case 6: self = .china
    case 7: self = .asia
    case 8: self = .worldwide
    case 9: self = .hongKong
    case 10: self = .southKorea
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .regionLanguageNull: return 0
    case .europe: return 1
    case .northAmerica: return 2
    case .australia: return 3
    case .newZeland: return 4
    case .japan: return 5
    case .china: return 6
    case .asia: return 7
    case .worldwide: return 8
    case .hongKong: return 9
    case .southKorea: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_RegionLanguageEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_RegionLanguageEnum] = [
    .regionLanguageNull,
    .europe,
    .northAmerica,
    .australia,
    .newZeland,
    .japan,
    .china,
    .asia,
    .worldwide,
    .hongKong,
    .southKorea,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_AchievementRankEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case achievementRankNull // = 0
  case bronze // = 1
  case silver // = 2
  case gold // = 3
  case platinum // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .achievementRankNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .achievementRankNull
    case 1: self = .bronze
    case 2: self = .silver
    case 3: self = .gold
    case 4: self = .platinum
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .achievementRankNull: return 0
    case .bronze: return 1
    case .silver: return 2
    case .gold: return 3
    case .platinum: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_AchievementRankEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_AchievementRankEnum] = [
    .achievementRankNull,
    .bronze,
    .silver,
    .gold,
    .platinum,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_AgeRatingCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case ageratingCategoryNull // = 0
  case esrb // = 1
  case pegi // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .ageratingCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ageratingCategoryNull
    case 1: self = .esrb
    case 2: self = .pegi
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ageratingCategoryNull: return 0
    case .esrb: return 1
    case .pegi: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_AgeRatingCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_AgeRatingCategoryEnum] = [
    .ageratingCategoryNull,
    .esrb,
    .pegi,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_AgeRatingRatingEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case ageratingRatingNull // = 0
  case three // = 1
  case seven // = 2
  case twelve // = 3
  case sixteen // = 4
  case eighteen // = 5
  case rp // = 6
  case ec // = 7
  case e // = 8
  case e10 // = 9
  case t // = 10
  case m // = 11
  case ao // = 12
  case UNRECOGNIZED(Int)

  public init() {
    self = .ageratingRatingNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .ageratingRatingNull
    case 1: self = .three
    case 2: self = .seven
    case 3: self = .twelve
    case 4: self = .sixteen
    case 5: self = .eighteen
    case 6: self = .rp
    case 7: self = .ec
    case 8: self = .e
    case 9: self = .e10
    case 10: self = .t
    case 11: self = .m
    case 12: self = .ao
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .ageratingRatingNull: return 0
    case .three: return 1
    case .seven: return 2
    case .twelve: return 3
    case .sixteen: return 4
    case .eighteen: return 5
    case .rp: return 6
    case .ec: return 7
    case .e: return 8
    case .e10: return 9
    case .t: return 10
    case .m: return 11
    case .ao: return 12
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_AgeRatingRatingEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_AgeRatingRatingEnum] = [
    .ageratingRatingNull,
    .three,
    .seven,
    .twelve,
    .sixteen,
    .eighteen,
    .rp,
    .ec,
    .e,
    .e10,
    .t,
    .m,
    .ao,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_GenderGenderEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case genderGenderNull // = 0
  case male // = 1
  case female // = 2
  case other // = 3
  case UNRECOGNIZED(Int)

  public init() {
    self = .genderGenderNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .genderGenderNull
    case 1: self = .male
    case 2: self = .female
    case 3: self = .other
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .genderGenderNull: return 0
    case .male: return 1
    case .female: return 2
    case .other: return 3
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_GenderGenderEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_GenderGenderEnum] = [
    .genderGenderNull,
    .male,
    .female,
    .other,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_CharacterSpeciesEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case characterSpeciesNull // = 0
  case human // = 1
  case alien // = 2
  case animal // = 3
  case android // = 4
  case unknown // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .characterSpeciesNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .characterSpeciesNull
    case 1: self = .human
    case 2: self = .alien
    case 3: self = .animal
    case 4: self = .android
    case 5: self = .unknown
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .characterSpeciesNull: return 0
    case .human: return 1
    case .alien: return 2
    case .animal: return 3
    case .android: return 4
    case .unknown: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_CharacterSpeciesEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_CharacterSpeciesEnum] = [
    .characterSpeciesNull,
    .human,
    .alien,
    .animal,
    .android,
    .unknown,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_DateFormatStartDateCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case yyyymmmmdd // = 0
  case yyyymmmm // = 1
  case yyyy // = 2
  case yyyyq1 // = 3
  case yyyyq2 // = 4
  case yyyyq3 // = 5
  case yyyyq4 // = 6
  case tbd // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .yyyymmmmdd
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .yyyymmmmdd
    case 1: self = .yyyymmmm
    case 2: self = .yyyy
    case 3: self = .yyyyq1
    case 4: self = .yyyyq2
    case 5: self = .yyyyq3
    case 6: self = .yyyyq4
    case 7: self = .tbd
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .yyyymmmmdd: return 0
    case .yyyymmmm: return 1
    case .yyyy: return 2
    case .yyyyq1: return 3
    case .yyyyq2: return 4
    case .yyyyq3: return 5
    case .yyyyq4: return 6
    case .tbd: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_DateFormatStartDateCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_DateFormatStartDateCategoryEnum] = [
    .yyyymmmmdd,
    .yyyymmmm,
    .yyyy,
    .yyyyq1,
    .yyyyq2,
    .yyyyq3,
    .yyyyq4,
    .tbd,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_WebsiteCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case websiteCategoryNull // = 0
  case websiteOfficial // = 1
  case websiteWikia // = 2
  case websiteWikipedia // = 3
  case websiteFacebook // = 4
  case websiteTwitter // = 5
  case websiteTwitch // = 6
  case websiteInstagram // = 8
  case websiteYoutube // = 9
  case websiteIphone // = 10
  case websiteIpad // = 11
  case websiteAndroid // = 12
  case websiteSteam // = 13
  case websiteReddit // = 14
  case websiteDiscord // = 15
  case websiteGooglePlus // = 16
  case websiteTumblr // = 17
  case websiteLinkedin // = 18
  case websitePinterest // = 19
  case websiteSoundcloud // = 20
  case UNRECOGNIZED(Int)

  public init() {
    self = .websiteCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .websiteCategoryNull
    case 1: self = .websiteOfficial
    case 2: self = .websiteWikia
    case 3: self = .websiteWikipedia
    case 4: self = .websiteFacebook
    case 5: self = .websiteTwitter
    case 6: self = .websiteTwitch
    case 8: self = .websiteInstagram
    case 9: self = .websiteYoutube
    case 10: self = .websiteIphone
    case 11: self = .websiteIpad
    case 12: self = .websiteAndroid
    case 13: self = .websiteSteam
    case 14: self = .websiteReddit
    case 15: self = .websiteDiscord
    case 16: self = .websiteGooglePlus
    case 17: self = .websiteTumblr
    case 18: self = .websiteLinkedin
    case 19: self = .websitePinterest
    case 20: self = .websiteSoundcloud
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .websiteCategoryNull: return 0
    case .websiteOfficial: return 1
    case .websiteWikia: return 2
    case .websiteWikipedia: return 3
    case .websiteFacebook: return 4
    case .websiteTwitter: return 5
    case .websiteTwitch: return 6
    case .websiteInstagram: return 8
    case .websiteYoutube: return 9
    case .websiteIphone: return 10
    case .websiteIpad: return 11
    case .websiteAndroid: return 12
    case .websiteSteam: return 13
    case .websiteReddit: return 14
    case .websiteDiscord: return 15
    case .websiteGooglePlus: return 16
    case .websiteTumblr: return 17
    case .websiteLinkedin: return 18
    case .websitePinterest: return 19
    case .websiteSoundcloud: return 20
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_WebsiteCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_WebsiteCategoryEnum] = [
    .websiteCategoryNull,
    .websiteOfficial,
    .websiteWikia,
    .websiteWikipedia,
    .websiteFacebook,
    .websiteTwitter,
    .websiteTwitch,
    .websiteInstagram,
    .websiteYoutube,
    .websiteIphone,
    .websiteIpad,
    .websiteAndroid,
    .websiteSteam,
    .websiteReddit,
    .websiteDiscord,
    .websiteGooglePlus,
    .websiteTumblr,
    .websiteLinkedin,
    .websitePinterest,
    .websiteSoundcloud,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_CreditCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case creditCategoryNull // = 0
  case voiceActor // = 1
  case language // = 2
  case companyCredit // = 3
  case employee // = 4
  case misc // = 5
  case supportCompany // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .creditCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .creditCategoryNull
    case 1: self = .voiceActor
    case 2: self = .language
    case 3: self = .companyCredit
    case 4: self = .employee
    case 5: self = .misc
    case 6: self = .supportCompany
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .creditCategoryNull: return 0
    case .voiceActor: return 1
    case .language: return 2
    case .companyCredit: return 3
    case .employee: return 4
    case .misc: return 5
    case .supportCompany: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_CreditCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_CreditCategoryEnum] = [
    .creditCategoryNull,
    .voiceActor,
    .language,
    .companyCredit,
    .employee,
    .misc,
    .supportCompany,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_ExternalGameCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case externalgameCategoryNull // = 0
  case externalgameSteam // = 1
  case externalgameGog // = 5
  case externalgameYoutube // = 10
  case externalgameMicrosoft // = 11
  case externalgameApple // = 13
  case externalgameTwitch // = 14
  case externalgameAndroid // = 15
  case UNRECOGNIZED(Int)

  public init() {
    self = .externalgameCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .externalgameCategoryNull
    case 1: self = .externalgameSteam
    case 5: self = .externalgameGog
    case 10: self = .externalgameYoutube
    case 11: self = .externalgameMicrosoft
    case 13: self = .externalgameApple
    case 14: self = .externalgameTwitch
    case 15: self = .externalgameAndroid
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .externalgameCategoryNull: return 0
    case .externalgameSteam: return 1
    case .externalgameGog: return 5
    case .externalgameYoutube: return 10
    case .externalgameMicrosoft: return 11
    case .externalgameApple: return 13
    case .externalgameTwitch: return 14
    case .externalgameAndroid: return 15
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_ExternalGameCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_ExternalGameCategoryEnum] = [
    .externalgameCategoryNull,
    .externalgameSteam,
    .externalgameGog,
    .externalgameYoutube,
    .externalgameMicrosoft,
    .externalgameApple,
    .externalgameTwitch,
    .externalgameAndroid,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_FeedCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case feedCategoryNull // = 0
  case pulseArticle // = 1
  case comingSoon // = 2
  case newTrailer // = 3
  case userContributedItem // = 5
  case userContributionsItem // = 6
  case pageContributedItem // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .feedCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .feedCategoryNull
    case 1: self = .pulseArticle
    case 2: self = .comingSoon
    case 3: self = .newTrailer
    case 5: self = .userContributedItem
    case 6: self = .userContributionsItem
    case 7: self = .pageContributedItem
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .feedCategoryNull: return 0
    case .pulseArticle: return 1
    case .comingSoon: return 2
    case .newTrailer: return 3
    case .userContributedItem: return 5
    case .userContributionsItem: return 6
    case .pageContributedItem: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_FeedCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_FeedCategoryEnum] = [
    .feedCategoryNull,
    .pulseArticle,
    .comingSoon,
    .newTrailer,
    .userContributedItem,
    .userContributionsItem,
    .pageContributedItem,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_GameCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case mainGame // = 0
  case dlcAddon // = 1
  case expansion // = 2
  case bundle // = 3
  case standaloneExpansion // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .mainGame
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .mainGame
    case 1: self = .dlcAddon
    case 2: self = .expansion
    case 3: self = .bundle
    case 4: self = .standaloneExpansion
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .mainGame: return 0
    case .dlcAddon: return 1
    case .expansion: return 2
    case .bundle: return 3
    case .standaloneExpansion: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_GameCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_GameCategoryEnum] = [
    .mainGame,
    .dlcAddon,
    .expansion,
    .bundle,
    .standaloneExpansion,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_GameStatusEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case released // = 0
  case alpha // = 2
  case beta // = 3
  case earlyAccess // = 4
  case offline // = 5
  case cancelled // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .released
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .released
    case 2: self = .alpha
    case 3: self = .beta
    case 4: self = .earlyAccess
    case 5: self = .offline
    case 6: self = .cancelled
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .released: return 0
    case .alpha: return 2
    case .beta: return 3
    case .earlyAccess: return 4
    case .offline: return 5
    case .cancelled: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_GameStatusEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_GameStatusEnum] = [
    .released,
    .alpha,
    .beta,
    .earlyAccess,
    .offline,
    .cancelled,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_GameVersionFeatureCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case boolean // = 0
  case description_ // = 1
  case UNRECOGNIZED(Int)

  public init() {
    self = .boolean
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .boolean
    case 1: self = .description_
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .boolean: return 0
    case .description_: return 1
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_GameVersionFeatureCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_GameVersionFeatureCategoryEnum] = [
    .boolean,
    .description_,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_GameVersionFeatureValueIncludedFeatureEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case notIncluded // = 0
  case included // = 1
  case preOrderOnly // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .notIncluded
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .notIncluded
    case 1: self = .included
    case 2: self = .preOrderOnly
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .notIncluded: return 0
    case .included: return 1
    case .preOrderOnly: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_GameVersionFeatureValueIncludedFeatureEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_GameVersionFeatureValueIncludedFeatureEnum] = [
    .notIncluded,
    .included,
    .preOrderOnly,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_PageCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case pageCategoryNull // = 0
  case personality // = 1
  case mediaOrganization // = 2
  case contentCreator // = 3
  case clanTeam // = 4
  case UNRECOGNIZED(Int)

  public init() {
    self = .pageCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pageCategoryNull
    case 1: self = .personality
    case 2: self = .mediaOrganization
    case 3: self = .contentCreator
    case 4: self = .clanTeam
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .pageCategoryNull: return 0
    case .personality: return 1
    case .mediaOrganization: return 2
    case .contentCreator: return 3
    case .clanTeam: return 4
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_PageCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_PageCategoryEnum] = [
    .pageCategoryNull,
    .personality,
    .mediaOrganization,
    .contentCreator,
    .clanTeam,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_ColorColorEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case green // = 0
  case blue // = 1
  case red // = 2
  case orange // = 3
  case pink // = 4
  case yellow // = 5
  case UNRECOGNIZED(Int)

  public init() {
    self = .green
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .green
    case 1: self = .blue
    case 2: self = .red
    case 3: self = .orange
    case 4: self = .pink
    case 5: self = .yellow
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .green: return 0
    case .blue: return 1
    case .red: return 2
    case .orange: return 3
    case .pink: return 4
    case .yellow: return 5
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_ColorColorEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_ColorColorEnum] = [
    .green,
    .blue,
    .red,
    .orange,
    .pink,
    .yellow,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_PageSubCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case pageSubCategoryNull // = 0
  case user // = 1
  case game // = 2
  case company // = 3
  case consumer // = 4
  case industry // = 5
  case eSports // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .pageSubCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .pageSubCategoryNull
    case 1: self = .user
    case 2: self = .game
    case 3: self = .company
    case 4: self = .consumer
    case 5: self = .industry
    case 6: self = .eSports
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .pageSubCategoryNull: return 0
    case .user: return 1
    case .game: return 2
    case .company: return 3
    case .consumer: return 4
    case .industry: return 5
    case .eSports: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_PageSubCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_PageSubCategoryEnum] = [
    .pageSubCategoryNull,
    .user,
    .game,
    .company,
    .consumer,
    .industry,
    .eSports,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_PlatformCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case platformCategoryNull // = 0
  case console // = 1
  case arcade // = 2
  case platform // = 3
  case operatingSystem // = 4
  case portableConsole // = 5
  case computer // = 6
  case UNRECOGNIZED(Int)

  public init() {
    self = .platformCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .platformCategoryNull
    case 1: self = .console
    case 2: self = .arcade
    case 3: self = .platform
    case 4: self = .operatingSystem
    case 5: self = .portableConsole
    case 6: self = .computer
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .platformCategoryNull: return 0
    case .console: return 1
    case .arcade: return 2
    case .platform: return 3
    case .operatingSystem: return 4
    case .portableConsole: return 5
    case .computer: return 6
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_PlatformCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_PlatformCategoryEnum] = [
    .platformCategoryNull,
    .console,
    .arcade,
    .platform,
    .operatingSystem,
    .portableConsole,
    .computer,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_ReviewCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case reviewCategoryNull // = 0
  case text // = 1
  case video // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .reviewCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .reviewCategoryNull
    case 1: self = .text
    case 2: self = .video
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .reviewCategoryNull: return 0
    case .text: return 1
    case .video: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_ReviewCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_ReviewCategoryEnum] = [
    .reviewCategoryNull,
    .text,
    .video,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_SocialMetricCategoryEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case socialmetricCategoryNull // = 0
  case follows // = 1
  case likes // = 2
  case hates // = 3
  case shares // = 4
  case view // = 5
  case comments // = 6
  case favorites // = 7
  case UNRECOGNIZED(Int)

  public init() {
    self = .socialmetricCategoryNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .socialmetricCategoryNull
    case 1: self = .follows
    case 2: self = .likes
    case 3: self = .hates
    case 4: self = .shares
    case 5: self = .view
    case 6: self = .comments
    case 7: self = .favorites
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .socialmetricCategoryNull: return 0
    case .follows: return 1
    case .likes: return 2
    case .hates: return 3
    case .shares: return 4
    case .view: return 5
    case .comments: return 6
    case .favorites: return 7
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_SocialMetricCategoryEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_SocialMetricCategoryEnum] = [
    .socialmetricCategoryNull,
    .follows,
    .likes,
    .hates,
    .shares,
    .view,
    .comments,
    .favorites,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_SocialMetricSourceSocialNetworkEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case socialmetricsourceSocialNetworkNull // = 0
  case socialmetricsourceOfficial // = 1
  case socialmetricsourceWikia // = 2
  case socialmetricsourceWikipedia // = 3
  case socialmetricsourceFacebook // = 4
  case socialmetricsourceTwitter // = 5
  case socialmetricsourceTwitch // = 6
  case socialmetricsourceInstagram // = 8
  case socialmetricsourceYoutube // = 9
  case socialmetricsourceIphone // = 10
  case socialmetricsourceIpad // = 11
  case socialmetricsourceAndroid // = 12
  case socialmetricsourceSteam // = 13
  case socialmetricsourceReddit // = 14
  case UNRECOGNIZED(Int)

  public init() {
    self = .socialmetricsourceSocialNetworkNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .socialmetricsourceSocialNetworkNull
    case 1: self = .socialmetricsourceOfficial
    case 2: self = .socialmetricsourceWikia
    case 3: self = .socialmetricsourceWikipedia
    case 4: self = .socialmetricsourceFacebook
    case 5: self = .socialmetricsourceTwitter
    case 6: self = .socialmetricsourceTwitch
    case 8: self = .socialmetricsourceInstagram
    case 9: self = .socialmetricsourceYoutube
    case 10: self = .socialmetricsourceIphone
    case 11: self = .socialmetricsourceIpad
    case 12: self = .socialmetricsourceAndroid
    case 13: self = .socialmetricsourceSteam
    case 14: self = .socialmetricsourceReddit
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .socialmetricsourceSocialNetworkNull: return 0
    case .socialmetricsourceOfficial: return 1
    case .socialmetricsourceWikia: return 2
    case .socialmetricsourceWikipedia: return 3
    case .socialmetricsourceFacebook: return 4
    case .socialmetricsourceTwitter: return 5
    case .socialmetricsourceTwitch: return 6
    case .socialmetricsourceInstagram: return 8
    case .socialmetricsourceYoutube: return 9
    case .socialmetricsourceIphone: return 10
    case .socialmetricsourceIpad: return 11
    case .socialmetricsourceAndroid: return 12
    case .socialmetricsourceSteam: return 13
    case .socialmetricsourceReddit: return 14
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_SocialMetricSourceSocialNetworkEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_SocialMetricSourceSocialNetworkEnum] = [
    .socialmetricsourceSocialNetworkNull,
    .socialmetricsourceOfficial,
    .socialmetricsourceWikia,
    .socialmetricsourceWikipedia,
    .socialmetricsourceFacebook,
    .socialmetricsourceTwitter,
    .socialmetricsourceTwitch,
    .socialmetricsourceInstagram,
    .socialmetricsourceYoutube,
    .socialmetricsourceIphone,
    .socialmetricsourceIpad,
    .socialmetricsourceAndroid,
    .socialmetricsourceSteam,
    .socialmetricsourceReddit,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_TestDummyEnumTestEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case testdummyEnumTestNull // = 0
  case enum1 // = 1
  case enum2 // = 2
  case UNRECOGNIZED(Int)

  public init() {
    self = .testdummyEnumTestNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .testdummyEnumTestNull
    case 1: self = .enum1
    case 2: self = .enum2
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .testdummyEnumTestNull: return 0
    case .enum1: return 1
    case .enum2: return 2
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_TestDummyEnumTestEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_TestDummyEnumTestEnum] = [
    .testdummyEnumTestNull,
    .enum1,
    .enum2,
  ]
}

#endif  // swift(>=4.2)

public enum Proto_UserRoleEnum: SwiftProtobuf.Enum {
  public typealias RawValue = Int
  case userRoleNull // = 0
  case userUser // = 1
  case userAdvancedUser // = 2
  case userSuperAdvancedUser // = 3
  case userKeeper // = 4
  case userAdmin // = 9
  case userSuperAdmin // = 10
  case UNRECOGNIZED(Int)

  public init() {
    self = .userRoleNull
  }

  public init?(rawValue: Int) {
    switch rawValue {
    case 0: self = .userRoleNull
    case 1: self = .userUser
    case 2: self = .userAdvancedUser
    case 3: self = .userSuperAdvancedUser
    case 4: self = .userKeeper
    case 9: self = .userAdmin
    case 10: self = .userSuperAdmin
    default: self = .UNRECOGNIZED(rawValue)
    }
  }

  public var rawValue: Int {
    switch self {
    case .userRoleNull: return 0
    case .userUser: return 1
    case .userAdvancedUser: return 2
    case .userSuperAdvancedUser: return 3
    case .userKeeper: return 4
    case .userAdmin: return 9
    case .userSuperAdmin: return 10
    case .UNRECOGNIZED(let i): return i
    }
  }

}

#if swift(>=4.2)

extension Proto_UserRoleEnum: CaseIterable {
  // The compiler won't synthesize support with the UNRECOGNIZED case.
  public static var allCases: [Proto_UserRoleEnum] = [
    .userRoleNull,
    .userUser,
    .userAdvancedUser,
    .userSuperAdvancedUser,
    .userKeeper,
    .userAdmin,
    .userSuperAdmin,
  ]
}

#endif  // swift(>=4.2)

public struct Proto_Count {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var count: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_MultiQueryResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var name: String = String()

  public var results: [Data] = []

  public var count: Int64 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_MultiQueryResultArray {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var result: [Proto_MultiQueryResult] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_AchievementResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var achievements: [Proto_Achievement] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Achievement {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var achievementIcon: Proto_AchievementIcon {
    get {return _storage._achievementIcon ?? Proto_AchievementIcon()}
    set {_uniqueStorage()._achievementIcon = newValue}
  }
  /// Returns true if `achievementIcon` has been explicitly set.
  public var hasAchievementIcon: Bool {return _storage._achievementIcon != nil}
  /// Clears the value of `achievementIcon`. Subsequent reads from it will return its default value.
  public mutating func clearAchievementIcon() {_uniqueStorage()._achievementIcon = nil}

  public var category: Proto_AchievementCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var externalID: String {
    get {return _storage._externalID}
    set {_uniqueStorage()._externalID = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var language: Proto_RegionLanguageEnum {
    get {return _storage._language}
    set {_uniqueStorage()._language = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var owners: Int32 {
    get {return _storage._owners}
    set {_uniqueStorage()._owners = newValue}
  }

  public var ownersPercentage: Double {
    get {return _storage._ownersPercentage}
    set {_uniqueStorage()._ownersPercentage = newValue}
  }

  public var rank: Proto_AchievementRankEnum {
    get {return _storage._rank}
    set {_uniqueStorage()._rank = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var tags: [Int32] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_AchievementIconResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var achievementicons: [Proto_AchievementIcon] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_AchievementIcon {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var alphaChannel: Bool = false

  public var animated: Bool = false

  public var height: Int32 = 0

  public var imageID: String = String()

  public var url: String = String()

  public var width: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_AgeRatingResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ageratings: [Proto_AgeRating] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_AgeRating {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var category: Proto_AgeRatingCategoryEnum = .ageratingCategoryNull

  public var contentDescriptions: [Proto_AgeRatingContentDescription] = []

  public var rating: Proto_AgeRatingRatingEnum = .ageratingRatingNull

  public var ratingCoverURL: String = String()

  public var synopsis: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_AgeRatingContentDescriptionResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var ageratingcontentdescriptions: [Proto_AgeRatingContentDescription] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_AgeRatingContentDescription {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var category: Proto_AgeRatingRatingEnum = .ageratingRatingNull

  public var description_p: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_AlternativeNameResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var alternativenames: [Proto_AlternativeName] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_AlternativeName {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var comment: String {
    get {return _storage._comment}
    set {_uniqueStorage()._comment = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ApiTokenResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var apitokens: [Proto_ApiToken] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_ApiToken {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var expiresIn: Int32 {
    get {return _storage._expiresIn}
    set {_uniqueStorage()._expiresIn = newValue}
  }

  public var token: String {
    get {return _storage._token}
    set {_uniqueStorage()._token = newValue}
  }

  public var user: Int32 {
    get {return _storage._user}
    set {_uniqueStorage()._user = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ArtworkResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var artworks: [Proto_Artwork] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Artwork {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var alphaChannel: Bool {
    get {return _storage._alphaChannel}
    set {_uniqueStorage()._alphaChannel = newValue}
  }

  public var animated: Bool {
    get {return _storage._animated}
    set {_uniqueStorage()._animated = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var height: Int32 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  public var imageID: String {
    get {return _storage._imageID}
    set {_uniqueStorage()._imageID = newValue}
  }

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var width: Int32 {
    get {return _storage._width}
    set {_uniqueStorage()._width = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_CharacterResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var characters: [Proto_Character] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Character {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var akas: [String] {
    get {return _storage._akas}
    set {_uniqueStorage()._akas = newValue}
  }

  public var countryName: String {
    get {return _storage._countryName}
    set {_uniqueStorage()._countryName = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var games: [Proto_Game] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  public var gender: Proto_GenderGenderEnum {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  public var mugShot: Proto_CharacterMugShot {
    get {return _storage._mugShot ?? Proto_CharacterMugShot()}
    set {_uniqueStorage()._mugShot = newValue}
  }
  /// Returns true if `mugShot` has been explicitly set.
  public var hasMugShot: Bool {return _storage._mugShot != nil}
  /// Clears the value of `mugShot`. Subsequent reads from it will return its default value.
  public mutating func clearMugShot() {_uniqueStorage()._mugShot = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var people: [Proto_Person] {
    get {return _storage._people}
    set {_uniqueStorage()._people = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var species: Proto_CharacterSpeciesEnum {
    get {return _storage._species}
    set {_uniqueStorage()._species = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_CharacterMugShotResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var charactermugshots: [Proto_CharacterMugShot] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_CharacterMugShot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var alphaChannel: Bool = false

  public var animated: Bool = false

  public var height: Int32 = 0

  public var imageID: String = String()

  public var url: String = String()

  public var width: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_CollectionResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var collections: [Proto_Collection] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Collection {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var games: [Proto_Game] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_CompanyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var companies: [Proto_Company] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Company {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var changeDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._changeDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._changeDate = newValue}
  }
  /// Returns true if `changeDate` has been explicitly set.
  public var hasChangeDate: Bool {return _storage._changeDate != nil}
  /// Clears the value of `changeDate`. Subsequent reads from it will return its default value.
  public mutating func clearChangeDate() {_uniqueStorage()._changeDate = nil}

  public var changeDateCategory: Proto_DateFormatStartDateCategoryEnum {
    get {return _storage._changeDateCategory}
    set {_uniqueStorage()._changeDateCategory = newValue}
  }

  public var changedCompanyID: Proto_Company {
    get {return _storage._changedCompanyID ?? Proto_Company()}
    set {_uniqueStorage()._changedCompanyID = newValue}
  }
  /// Returns true if `changedCompanyID` has been explicitly set.
  public var hasChangedCompanyID: Bool {return _storage._changedCompanyID != nil}
  /// Clears the value of `changedCompanyID`. Subsequent reads from it will return its default value.
  public mutating func clearChangedCompanyID() {_uniqueStorage()._changedCompanyID = nil}

  public var country: Int32 {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var developed: [Proto_Game] {
    get {return _storage._developed}
    set {_uniqueStorage()._developed = newValue}
  }

  public var logo: Proto_CompanyLogo {
    get {return _storage._logo ?? Proto_CompanyLogo()}
    set {_uniqueStorage()._logo = newValue}
  }
  /// Returns true if `logo` has been explicitly set.
  public var hasLogo: Bool {return _storage._logo != nil}
  /// Clears the value of `logo`. Subsequent reads from it will return its default value.
  public mutating func clearLogo() {_uniqueStorage()._logo = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var parent: Proto_Company {
    get {return _storage._parent ?? Proto_Company()}
    set {_uniqueStorage()._parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  public var hasParent: Bool {return _storage._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  public mutating func clearParent() {_uniqueStorage()._parent = nil}

  public var published: [Proto_Game] {
    get {return _storage._published}
    set {_uniqueStorage()._published = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var startDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._startDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._startDate = newValue}
  }
  /// Returns true if `startDate` has been explicitly set.
  public var hasStartDate: Bool {return _storage._startDate != nil}
  /// Clears the value of `startDate`. Subsequent reads from it will return its default value.
  public mutating func clearStartDate() {_uniqueStorage()._startDate = nil}

  public var startDateCategory: Proto_DateFormatStartDateCategoryEnum {
    get {return _storage._startDateCategory}
    set {_uniqueStorage()._startDateCategory = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var websites: [Proto_CompanyWebsite] {
    get {return _storage._websites}
    set {_uniqueStorage()._websites = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_CompanyLogoResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var companylogos: [Proto_CompanyLogo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_CompanyLogo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var alphaChannel: Bool = false

  public var animated: Bool = false

  public var height: Int32 = 0

  public var imageID: String = String()

  public var url: String = String()

  public var width: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_CompanyWebsiteResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var companywebsites: [Proto_CompanyWebsite] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_CompanyWebsite {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var category: Proto_WebsiteCategoryEnum = .websiteCategoryNull

  public var trusted: Bool = false

  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_CoverResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var covers: [Proto_Cover] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Cover {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var alphaChannel: Bool {
    get {return _storage._alphaChannel}
    set {_uniqueStorage()._alphaChannel = newValue}
  }

  public var animated: Bool {
    get {return _storage._animated}
    set {_uniqueStorage()._animated = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var height: Int32 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  public var imageID: String {
    get {return _storage._imageID}
    set {_uniqueStorage()._imageID = newValue}
  }

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var width: Int32 {
    get {return _storage._width}
    set {_uniqueStorage()._width = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_CreditResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var credits: [Proto_Credit] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Credit {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var category: Proto_CreditCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var character: Proto_Character {
    get {return _storage._character ?? Proto_Character()}
    set {_uniqueStorage()._character = newValue}
  }
  /// Returns true if `character` has been explicitly set.
  public var hasCharacter: Bool {return _storage._character != nil}
  /// Clears the value of `character`. Subsequent reads from it will return its default value.
  public mutating func clearCharacter() {_uniqueStorage()._character = nil}

  public var characterCreditedName: String {
    get {return _storage._characterCreditedName}
    set {_uniqueStorage()._characterCreditedName = newValue}
  }

  public var comment: String {
    get {return _storage._comment}
    set {_uniqueStorage()._comment = newValue}
  }

  public var company: Proto_Company {
    get {return _storage._company ?? Proto_Company()}
    set {_uniqueStorage()._company = newValue}
  }
  /// Returns true if `company` has been explicitly set.
  public var hasCompany: Bool {return _storage._company != nil}
  /// Clears the value of `company`. Subsequent reads from it will return its default value.
  public mutating func clearCompany() {_uniqueStorage()._company = nil}

  public var country: Int32 {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var creditedName: String {
    get {return _storage._creditedName}
    set {_uniqueStorage()._creditedName = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var person: Proto_Person {
    get {return _storage._person ?? Proto_Person()}
    set {_uniqueStorage()._person = newValue}
  }
  /// Returns true if `person` has been explicitly set.
  public var hasPerson: Bool {return _storage._person != nil}
  /// Clears the value of `person`. Subsequent reads from it will return its default value.
  public mutating func clearPerson() {_uniqueStorage()._person = nil}

  public var personTitle: Proto_Title {
    get {return _storage._personTitle ?? Proto_Title()}
    set {_uniqueStorage()._personTitle = newValue}
  }
  /// Returns true if `personTitle` has been explicitly set.
  public var hasPersonTitle: Bool {return _storage._personTitle != nil}
  /// Clears the value of `personTitle`. Subsequent reads from it will return its default value.
  public mutating func clearPersonTitle() {_uniqueStorage()._personTitle = nil}

  public var position: Int32 {
    get {return _storage._position}
    set {_uniqueStorage()._position = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ExternalGameResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var externalgames: [Proto_ExternalGame] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_ExternalGame {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var category: Proto_ExternalGameCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var year: Int32 {
    get {return _storage._year}
    set {_uniqueStorage()._year = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_FeedResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var feeds: [Proto_Feed] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Feed {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var category: Proto_FeedCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var feedLikesCount: Int32 {
    get {return _storage._feedLikesCount}
    set {_uniqueStorage()._feedLikesCount = newValue}
  }

  public var feedVideo: Proto_GameVideo {
    get {return _storage._feedVideo ?? Proto_GameVideo()}
    set {_uniqueStorage()._feedVideo = newValue}
  }
  /// Returns true if `feedVideo` has been explicitly set.
  public var hasFeedVideo: Bool {return _storage._feedVideo != nil}
  /// Clears the value of `feedVideo`. Subsequent reads from it will return its default value.
  public mutating func clearFeedVideo() {_uniqueStorage()._feedVideo = nil}

  public var games: [Proto_Game] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  public var meta: String {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._publishedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._publishedAt = newValue}
  }
  /// Returns true if `publishedAt` has been explicitly set.
  public var hasPublishedAt: Bool {return _storage._publishedAt != nil}
  /// Clears the value of `publishedAt`. Subsequent reads from it will return its default value.
  public mutating func clearPublishedAt() {_uniqueStorage()._publishedAt = nil}

  public var pulse: Proto_Pulse {
    get {return _storage._pulse ?? Proto_Pulse()}
    set {_uniqueStorage()._pulse = newValue}
  }
  /// Returns true if `pulse` has been explicitly set.
  public var hasPulse: Bool {return _storage._pulse != nil}
  /// Clears the value of `pulse`. Subsequent reads from it will return its default value.
  public mutating func clearPulse() {_uniqueStorage()._pulse = nil}

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var user: Int32 {
    get {return _storage._user}
    set {_uniqueStorage()._user = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_FeedFollowResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var feedfollows: [Proto_FeedFollow] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_FeedFollow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var feed: Proto_FeedCategoryEnum {
    get {return _storage._feed}
    set {_uniqueStorage()._feed = newValue}
  }

  public var publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._publishedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._publishedAt = newValue}
  }
  /// Returns true if `publishedAt` has been explicitly set.
  public var hasPublishedAt: Bool {return _storage._publishedAt != nil}
  /// Clears the value of `publishedAt`. Subsequent reads from it will return its default value.
  public mutating func clearPublishedAt() {_uniqueStorage()._publishedAt = nil}

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var user: Proto_User {
    get {return _storage._user ?? Proto_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_FollowResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var follows: [Proto_Follow] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Follow {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var user: Proto_User {
    get {return _storage._user ?? Proto_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_FranchiseResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var franchises: [Proto_Franchise] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Franchise {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var games: [Proto_Game] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_GameResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var games: [Proto_Game] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Game {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var ageRatings: [Proto_AgeRating] {
    get {return _storage._ageRatings}
    set {_uniqueStorage()._ageRatings = newValue}
  }

  public var aggregatedRating: Double {
    get {return _storage._aggregatedRating}
    set {_uniqueStorage()._aggregatedRating = newValue}
  }

  public var aggregatedRatingCount: Int32 {
    get {return _storage._aggregatedRatingCount}
    set {_uniqueStorage()._aggregatedRatingCount = newValue}
  }

  public var alternativeNames: [Proto_AlternativeName] {
    get {return _storage._alternativeNames}
    set {_uniqueStorage()._alternativeNames = newValue}
  }

  public var artworks: [Proto_Artwork] {
    get {return _storage._artworks}
    set {_uniqueStorage()._artworks = newValue}
  }

  public var bundles: [Proto_Game] {
    get {return _storage._bundles}
    set {_uniqueStorage()._bundles = newValue}
  }

  public var category: Proto_GameCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var collection: Proto_Collection {
    get {return _storage._collection ?? Proto_Collection()}
    set {_uniqueStorage()._collection = newValue}
  }
  /// Returns true if `collection` has been explicitly set.
  public var hasCollection: Bool {return _storage._collection != nil}
  /// Clears the value of `collection`. Subsequent reads from it will return its default value.
  public mutating func clearCollection() {_uniqueStorage()._collection = nil}

  public var cover: Proto_Cover {
    get {return _storage._cover ?? Proto_Cover()}
    set {_uniqueStorage()._cover = newValue}
  }
  /// Returns true if `cover` has been explicitly set.
  public var hasCover: Bool {return _storage._cover != nil}
  /// Clears the value of `cover`. Subsequent reads from it will return its default value.
  public mutating func clearCover() {_uniqueStorage()._cover = nil}

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var dlcs: [Proto_Game] {
    get {return _storage._dlcs}
    set {_uniqueStorage()._dlcs = newValue}
  }

  public var expansions: [Proto_Game] {
    get {return _storage._expansions}
    set {_uniqueStorage()._expansions = newValue}
  }

  public var externalGames: [Proto_ExternalGame] {
    get {return _storage._externalGames}
    set {_uniqueStorage()._externalGames = newValue}
  }

  public var firstReleaseDate: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._firstReleaseDate ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._firstReleaseDate = newValue}
  }
  /// Returns true if `firstReleaseDate` has been explicitly set.
  public var hasFirstReleaseDate: Bool {return _storage._firstReleaseDate != nil}
  /// Clears the value of `firstReleaseDate`. Subsequent reads from it will return its default value.
  public mutating func clearFirstReleaseDate() {_uniqueStorage()._firstReleaseDate = nil}

  public var follows: Int32 {
    get {return _storage._follows}
    set {_uniqueStorage()._follows = newValue}
  }

  public var franchise: Proto_Franchise {
    get {return _storage._franchise ?? Proto_Franchise()}
    set {_uniqueStorage()._franchise = newValue}
  }
  /// Returns true if `franchise` has been explicitly set.
  public var hasFranchise: Bool {return _storage._franchise != nil}
  /// Clears the value of `franchise`. Subsequent reads from it will return its default value.
  public mutating func clearFranchise() {_uniqueStorage()._franchise = nil}

  public var franchises: [Proto_Franchise] {
    get {return _storage._franchises}
    set {_uniqueStorage()._franchises = newValue}
  }

  public var gameEngines: [Proto_GameEngine] {
    get {return _storage._gameEngines}
    set {_uniqueStorage()._gameEngines = newValue}
  }

  public var gameModes: [Proto_GameMode] {
    get {return _storage._gameModes}
    set {_uniqueStorage()._gameModes = newValue}
  }

  public var genres: [Proto_Genre] {
    get {return _storage._genres}
    set {_uniqueStorage()._genres = newValue}
  }

  public var hypes: Int32 {
    get {return _storage._hypes}
    set {_uniqueStorage()._hypes = newValue}
  }

  public var involvedCompanies: [Proto_InvolvedCompany] {
    get {return _storage._involvedCompanies}
    set {_uniqueStorage()._involvedCompanies = newValue}
  }

  public var keywords: [Proto_Keyword] {
    get {return _storage._keywords}
    set {_uniqueStorage()._keywords = newValue}
  }

  public var multiplayerModes: [Proto_MultiplayerMode] {
    get {return _storage._multiplayerModes}
    set {_uniqueStorage()._multiplayerModes = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var parentGame: Proto_Game {
    get {return _storage._parentGame ?? Proto_Game()}
    set {_uniqueStorage()._parentGame = newValue}
  }
  /// Returns true if `parentGame` has been explicitly set.
  public var hasParentGame: Bool {return _storage._parentGame != nil}
  /// Clears the value of `parentGame`. Subsequent reads from it will return its default value.
  public mutating func clearParentGame() {_uniqueStorage()._parentGame = nil}

  public var platforms: [Proto_Platform] {
    get {return _storage._platforms}
    set {_uniqueStorage()._platforms = newValue}
  }

  public var playerPerspectives: [Proto_PlayerPerspective] {
    get {return _storage._playerPerspectives}
    set {_uniqueStorage()._playerPerspectives = newValue}
  }

  public var popularity: Double {
    get {return _storage._popularity}
    set {_uniqueStorage()._popularity = newValue}
  }

  public var pulseCount: Int32 {
    get {return _storage._pulseCount}
    set {_uniqueStorage()._pulseCount = newValue}
  }

  public var rating: Double {
    get {return _storage._rating}
    set {_uniqueStorage()._rating = newValue}
  }

  public var ratingCount: Int32 {
    get {return _storage._ratingCount}
    set {_uniqueStorage()._ratingCount = newValue}
  }

  public var releaseDates: [Proto_ReleaseDate] {
    get {return _storage._releaseDates}
    set {_uniqueStorage()._releaseDates = newValue}
  }

  public var screenshots: [Proto_Screenshot] {
    get {return _storage._screenshots}
    set {_uniqueStorage()._screenshots = newValue}
  }

  public var similarGames: [Proto_Game] {
    get {return _storage._similarGames}
    set {_uniqueStorage()._similarGames = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var standaloneExpansions: [Proto_Game] {
    get {return _storage._standaloneExpansions}
    set {_uniqueStorage()._standaloneExpansions = newValue}
  }

  public var status: Proto_GameStatusEnum {
    get {return _storage._status}
    set {_uniqueStorage()._status = newValue}
  }

  public var storyline: String {
    get {return _storage._storyline}
    set {_uniqueStorage()._storyline = newValue}
  }

  public var summary: String {
    get {return _storage._summary}
    set {_uniqueStorage()._summary = newValue}
  }

  public var tags: [Int32] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var themes: [Proto_Theme] {
    get {return _storage._themes}
    set {_uniqueStorage()._themes = newValue}
  }

  public var timeToBeat: Proto_TimeToBeat {
    get {return _storage._timeToBeat ?? Proto_TimeToBeat()}
    set {_uniqueStorage()._timeToBeat = newValue}
  }
  /// Returns true if `timeToBeat` has been explicitly set.
  public var hasTimeToBeat: Bool {return _storage._timeToBeat != nil}
  /// Clears the value of `timeToBeat`. Subsequent reads from it will return its default value.
  public mutating func clearTimeToBeat() {_uniqueStorage()._timeToBeat = nil}

  public var totalRating: Double {
    get {return _storage._totalRating}
    set {_uniqueStorage()._totalRating = newValue}
  }

  public var totalRatingCount: Int32 {
    get {return _storage._totalRatingCount}
    set {_uniqueStorage()._totalRatingCount = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var versionParent: Proto_Game {
    get {return _storage._versionParent ?? Proto_Game()}
    set {_uniqueStorage()._versionParent = newValue}
  }
  /// Returns true if `versionParent` has been explicitly set.
  public var hasVersionParent: Bool {return _storage._versionParent != nil}
  /// Clears the value of `versionParent`. Subsequent reads from it will return its default value.
  public mutating func clearVersionParent() {_uniqueStorage()._versionParent = nil}

  public var versionTitle: String {
    get {return _storage._versionTitle}
    set {_uniqueStorage()._versionTitle = newValue}
  }

  public var videos: [Proto_GameVideo] {
    get {return _storage._videos}
    set {_uniqueStorage()._videos = newValue}
  }

  public var websites: [Proto_Website] {
    get {return _storage._websites}
    set {_uniqueStorage()._websites = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_GameEngineResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameengines: [Proto_GameEngine] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_GameEngine {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var companies: [Proto_Company] {
    get {return _storage._companies}
    set {_uniqueStorage()._companies = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var logo: Proto_GameEngineLogo {
    get {return _storage._logo ?? Proto_GameEngineLogo()}
    set {_uniqueStorage()._logo = newValue}
  }
  /// Returns true if `logo` has been explicitly set.
  public var hasLogo: Bool {return _storage._logo != nil}
  /// Clears the value of `logo`. Subsequent reads from it will return its default value.
  public mutating func clearLogo() {_uniqueStorage()._logo = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var platforms: [Proto_Platform] {
    get {return _storage._platforms}
    set {_uniqueStorage()._platforms = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_GameEngineLogoResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameenginelogos: [Proto_GameEngineLogo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_GameEngineLogo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var alphaChannel: Bool = false

  public var animated: Bool = false

  public var height: Int32 = 0

  public var imageID: String = String()

  public var url: String = String()

  public var width: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_GameModeResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gamemodes: [Proto_GameMode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_GameMode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_GameVersionResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameversions: [Proto_GameVersion] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_GameVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var features: [Proto_GameVersionFeature] {
    get {return _storage._features}
    set {_uniqueStorage()._features = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var games: [Proto_Game] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_GameVersionFeatureResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameversionfeatures: [Proto_GameVersionFeature] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_GameVersionFeature {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var category: Proto_GameVersionFeatureCategoryEnum = .boolean

  public var description_p: String = String()

  public var position: Int32 = 0

  public var title: String = String()

  public var values: [Proto_GameVersionFeatureValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_GameVersionFeatureValueResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gameversionfeaturevalues: [Proto_GameVersionFeatureValue] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_GameVersionFeatureValue {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var gameFeature: Proto_GameVersionFeature {
    get {return _storage._gameFeature ?? Proto_GameVersionFeature()}
    set {_uniqueStorage()._gameFeature = newValue}
  }
  /// Returns true if `gameFeature` has been explicitly set.
  public var hasGameFeature: Bool {return _storage._gameFeature != nil}
  /// Clears the value of `gameFeature`. Subsequent reads from it will return its default value.
  public mutating func clearGameFeature() {_uniqueStorage()._gameFeature = nil}

  public var includedFeature: Proto_GameVersionFeatureValueIncludedFeatureEnum {
    get {return _storage._includedFeature}
    set {_uniqueStorage()._includedFeature = newValue}
  }

  public var note: String {
    get {return _storage._note}
    set {_uniqueStorage()._note = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_GameVideoResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var gamevideos: [Proto_GameVideo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_GameVideo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var videoID: String {
    get {return _storage._videoID}
    set {_uniqueStorage()._videoID = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_GenreResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var genres: [Proto_Genre] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Genre {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_InvolvedCompanyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var involvedcompanies: [Proto_InvolvedCompany] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_InvolvedCompany {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var company: Proto_Company {
    get {return _storage._company ?? Proto_Company()}
    set {_uniqueStorage()._company = newValue}
  }
  /// Returns true if `company` has been explicitly set.
  public var hasCompany: Bool {return _storage._company != nil}
  /// Clears the value of `company`. Subsequent reads from it will return its default value.
  public mutating func clearCompany() {_uniqueStorage()._company = nil}

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var developer: Bool {
    get {return _storage._developer}
    set {_uniqueStorage()._developer = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var porting: Bool {
    get {return _storage._porting}
    set {_uniqueStorage()._porting = newValue}
  }

  public var publisher: Bool {
    get {return _storage._publisher}
    set {_uniqueStorage()._publisher = newValue}
  }

  public var supporting: Bool {
    get {return _storage._supporting}
    set {_uniqueStorage()._supporting = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_KeywordResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var keywords: [Proto_Keyword] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Keyword {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ListResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var lists: [Proto_List] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_List {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var entriesCount: Int32 {
    get {return _storage._entriesCount}
    set {_uniqueStorage()._entriesCount = newValue}
  }

  public var listEntries: [Proto_ListEntry] {
    get {return _storage._listEntries}
    set {_uniqueStorage()._listEntries = newValue}
  }

  public var listTags: [Int32] {
    get {return _storage._listTags}
    set {_uniqueStorage()._listTags = newValue}
  }

  public var listedGames: [Proto_Game] {
    get {return _storage._listedGames}
    set {_uniqueStorage()._listedGames = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var numbering: Bool {
    get {return _storage._numbering}
    set {_uniqueStorage()._numbering = newValue}
  }

  public var `private`: Bool {
    get {return _storage._private}
    set {_uniqueStorage()._private = newValue}
  }

  public var similarLists: [Proto_List] {
    get {return _storage._similarLists}
    set {_uniqueStorage()._similarLists = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var user: Proto_User {
    get {return _storage._user ?? Proto_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ListEntryResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var listentries: [Proto_ListEntry] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_ListEntry {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var list: Proto_List {
    get {return _storage._list ?? Proto_List()}
    set {_uniqueStorage()._list = newValue}
  }
  /// Returns true if `list` has been explicitly set.
  public var hasList: Bool {return _storage._list != nil}
  /// Clears the value of `list`. Subsequent reads from it will return its default value.
  public mutating func clearList() {_uniqueStorage()._list = nil}

  public var platform: Proto_Platform {
    get {return _storage._platform ?? Proto_Platform()}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  public var position: Int32 {
    get {return _storage._position}
    set {_uniqueStorage()._position = newValue}
  }

  public var `private`: Bool {
    get {return _storage._private}
    set {_uniqueStorage()._private = newValue}
  }

  public var user: Proto_User {
    get {return _storage._user ?? Proto_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_MultiplayerModeResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var multiplayermodes: [Proto_MultiplayerMode] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_MultiplayerMode {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var campaigncoop: Bool {
    get {return _storage._campaigncoop}
    set {_uniqueStorage()._campaigncoop = newValue}
  }

  public var dropin: Bool {
    get {return _storage._dropin}
    set {_uniqueStorage()._dropin = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var lancoop: Bool {
    get {return _storage._lancoop}
    set {_uniqueStorage()._lancoop = newValue}
  }

  public var offlinecoop: Bool {
    get {return _storage._offlinecoop}
    set {_uniqueStorage()._offlinecoop = newValue}
  }

  public var offlinecoopmax: Int32 {
    get {return _storage._offlinecoopmax}
    set {_uniqueStorage()._offlinecoopmax = newValue}
  }

  public var offlinemax: Int32 {
    get {return _storage._offlinemax}
    set {_uniqueStorage()._offlinemax = newValue}
  }

  public var onlinecoop: Bool {
    get {return _storage._onlinecoop}
    set {_uniqueStorage()._onlinecoop = newValue}
  }

  public var onlinecoopmax: Int32 {
    get {return _storage._onlinecoopmax}
    set {_uniqueStorage()._onlinecoopmax = newValue}
  }

  public var onlinemax: Int32 {
    get {return _storage._onlinemax}
    set {_uniqueStorage()._onlinemax = newValue}
  }

  public var platform: Proto_Platform {
    get {return _storage._platform ?? Proto_Platform()}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  public var splitscreen: Bool {
    get {return _storage._splitscreen}
    set {_uniqueStorage()._splitscreen = newValue}
  }

  public var splitscreenonline: Bool {
    get {return _storage._splitscreenonline}
    set {_uniqueStorage()._splitscreenonline = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PageResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pages: [Proto_Page] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Page {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var background: Proto_PageBackground {
    get {return _storage._background ?? Proto_PageBackground()}
    set {_uniqueStorage()._background = newValue}
  }
  /// Returns true if `background` has been explicitly set.
  public var hasBackground: Bool {return _storage._background != nil}
  /// Clears the value of `background`. Subsequent reads from it will return its default value.
  public mutating func clearBackground() {_uniqueStorage()._background = nil}

  public var battlenet: String {
    get {return _storage._battlenet}
    set {_uniqueStorage()._battlenet = newValue}
  }

  public var category: Proto_PageCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var color: Proto_ColorColorEnum {
    get {return _storage._color}
    set {_uniqueStorage()._color = newValue}
  }

  public var company: Proto_Company {
    get {return _storage._company ?? Proto_Company()}
    set {_uniqueStorage()._company = newValue}
  }
  /// Returns true if `company` has been explicitly set.
  public var hasCompany: Bool {return _storage._company != nil}
  /// Clears the value of `company`. Subsequent reads from it will return its default value.
  public mutating func clearCompany() {_uniqueStorage()._company = nil}

  public var country: Int32 {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var feed: Proto_Feed {
    get {return _storage._feed ?? Proto_Feed()}
    set {_uniqueStorage()._feed = newValue}
  }
  /// Returns true if `feed` has been explicitly set.
  public var hasFeed: Bool {return _storage._feed != nil}
  /// Clears the value of `feed`. Subsequent reads from it will return its default value.
  public mutating func clearFeed() {_uniqueStorage()._feed = nil}

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var origin: String {
    get {return _storage._origin}
    set {_uniqueStorage()._origin = newValue}
  }

  public var pageFollowsCount: Int32 {
    get {return _storage._pageFollowsCount}
    set {_uniqueStorage()._pageFollowsCount = newValue}
  }

  public var pageLogo: Proto_PageLogo {
    get {return _storage._pageLogo ?? Proto_PageLogo()}
    set {_uniqueStorage()._pageLogo = newValue}
  }
  /// Returns true if `pageLogo` has been explicitly set.
  public var hasPageLogo: Bool {return _storage._pageLogo != nil}
  /// Clears the value of `pageLogo`. Subsequent reads from it will return its default value.
  public mutating func clearPageLogo() {_uniqueStorage()._pageLogo = nil}

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var subCategory: Proto_PageSubCategoryEnum {
    get {return _storage._subCategory}
    set {_uniqueStorage()._subCategory = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var uplay: String {
    get {return _storage._uplay}
    set {_uniqueStorage()._uplay = newValue}
  }

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var user: Proto_User {
    get {return _storage._user ?? Proto_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var websites: [Proto_PageWebsite] {
    get {return _storage._websites}
    set {_uniqueStorage()._websites = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PageBackgroundResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pagebackgrounds: [Proto_PageBackground] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PageBackground {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var alphaChannel: Bool = false

  public var animated: Bool = false

  public var height: Int32 = 0

  public var imageID: String = String()

  public var url: String = String()

  public var width: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PageLogoResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pagelogos: [Proto_PageLogo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PageLogo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var alphaChannel: Bool = false

  public var animated: Bool = false

  public var height: Int32 = 0

  public var imageID: String = String()

  public var url: String = String()

  public var width: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PageWebsiteResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pagewebsites: [Proto_PageWebsite] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PageWebsite {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var category: Proto_WebsiteCategoryEnum = .websiteCategoryNull

  public var trusted: Bool = false

  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PersonResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var people: [Proto_Person] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Person {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var bio: String {
    get {return _storage._bio}
    set {_uniqueStorage()._bio = newValue}
  }

  public var characters: [Proto_Character] {
    get {return _storage._characters}
    set {_uniqueStorage()._characters = newValue}
  }

  public var country: Int32 {
    get {return _storage._country}
    set {_uniqueStorage()._country = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var creditedGames: [Proto_Game] {
    get {return _storage._creditedGames}
    set {_uniqueStorage()._creditedGames = newValue}
  }

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var dob: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._dob ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._dob = newValue}
  }
  /// Returns true if `dob` has been explicitly set.
  public var hasDob: Bool {return _storage._dob != nil}
  /// Clears the value of `dob`. Subsequent reads from it will return its default value.
  public mutating func clearDob() {_uniqueStorage()._dob = nil}

  public var gender: Proto_GenderGenderEnum {
    get {return _storage._gender}
    set {_uniqueStorage()._gender = newValue}
  }

  public var lovesCount: Int32 {
    get {return _storage._lovesCount}
    set {_uniqueStorage()._lovesCount = newValue}
  }

  public var mugShot: Proto_PersonMugShot {
    get {return _storage._mugShot ?? Proto_PersonMugShot()}
    set {_uniqueStorage()._mugShot = newValue}
  }
  /// Returns true if `mugShot` has been explicitly set.
  public var hasMugShot: Bool {return _storage._mugShot != nil}
  /// Clears the value of `mugShot`. Subsequent reads from it will return its default value.
  public mutating func clearMugShot() {_uniqueStorage()._mugShot = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var nicknames: [String] {
    get {return _storage._nicknames}
    set {_uniqueStorage()._nicknames = newValue}
  }

  public var parent: Proto_Person {
    get {return _storage._parent ?? Proto_Person()}
    set {_uniqueStorage()._parent = newValue}
  }
  /// Returns true if `parent` has been explicitly set.
  public var hasParent: Bool {return _storage._parent != nil}
  /// Clears the value of `parent`. Subsequent reads from it will return its default value.
  public mutating func clearParent() {_uniqueStorage()._parent = nil}

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var voiceActed: [Proto_Game] {
    get {return _storage._voiceActed}
    set {_uniqueStorage()._voiceActed = newValue}
  }

  public var websites: [Proto_PersonWebsite] {
    get {return _storage._websites}
    set {_uniqueStorage()._websites = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PersonMugShotResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var personmugshots: [Proto_PersonMugShot] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PersonMugShot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var height: Int32 = 0

  public var imageID: String = String()

  public var url: String = String()

  public var width: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PersonWebsiteResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var personwebsites: [Proto_PersonWebsite] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PersonWebsite {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var category: Proto_WebsiteCategoryEnum = .websiteCategoryNull

  public var trusted: Bool = false

  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PlatformResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var platforms: [Proto_Platform] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Platform {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var abbreviation: String {
    get {return _storage._abbreviation}
    set {_uniqueStorage()._abbreviation = newValue}
  }

  public var alternativeName: String {
    get {return _storage._alternativeName}
    set {_uniqueStorage()._alternativeName = newValue}
  }

  public var category: Proto_PlatformCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var generation: Int32 {
    get {return _storage._generation}
    set {_uniqueStorage()._generation = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var platformLogo: Proto_PlatformLogo {
    get {return _storage._platformLogo ?? Proto_PlatformLogo()}
    set {_uniqueStorage()._platformLogo = newValue}
  }
  /// Returns true if `platformLogo` has been explicitly set.
  public var hasPlatformLogo: Bool {return _storage._platformLogo != nil}
  /// Clears the value of `platformLogo`. Subsequent reads from it will return its default value.
  public mutating func clearPlatformLogo() {_uniqueStorage()._platformLogo = nil}

  public var productFamily: Proto_ProductFamily {
    get {return _storage._productFamily ?? Proto_ProductFamily()}
    set {_uniqueStorage()._productFamily = newValue}
  }
  /// Returns true if `productFamily` has been explicitly set.
  public var hasProductFamily: Bool {return _storage._productFamily != nil}
  /// Clears the value of `productFamily`. Subsequent reads from it will return its default value.
  public mutating func clearProductFamily() {_uniqueStorage()._productFamily = nil}

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var summary: String {
    get {return _storage._summary}
    set {_uniqueStorage()._summary = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var versions: [Proto_PlatformVersion] {
    get {return _storage._versions}
    set {_uniqueStorage()._versions = newValue}
  }

  public var websites: [Proto_PlatformWebsite] {
    get {return _storage._websites}
    set {_uniqueStorage()._websites = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PlatformLogoResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var platformlogos: [Proto_PlatformLogo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PlatformLogo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var alphaChannel: Bool = false

  public var animated: Bool = false

  public var height: Int32 = 0

  public var imageID: String = String()

  public var url: String = String()

  public var width: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PlatformVersionResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var platformversions: [Proto_PlatformVersion] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PlatformVersion {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var companies: [Proto_PlatformVersionCompany] {
    get {return _storage._companies}
    set {_uniqueStorage()._companies = newValue}
  }

  public var connectivity: String {
    get {return _storage._connectivity}
    set {_uniqueStorage()._connectivity = newValue}
  }

  public var cpu: String {
    get {return _storage._cpu}
    set {_uniqueStorage()._cpu = newValue}
  }

  public var graphics: String {
    get {return _storage._graphics}
    set {_uniqueStorage()._graphics = newValue}
  }

  public var mainManufacturer: Proto_PlatformVersionCompany {
    get {return _storage._mainManufacturer ?? Proto_PlatformVersionCompany()}
    set {_uniqueStorage()._mainManufacturer = newValue}
  }
  /// Returns true if `mainManufacturer` has been explicitly set.
  public var hasMainManufacturer: Bool {return _storage._mainManufacturer != nil}
  /// Clears the value of `mainManufacturer`. Subsequent reads from it will return its default value.
  public mutating func clearMainManufacturer() {_uniqueStorage()._mainManufacturer = nil}

  public var media: String {
    get {return _storage._media}
    set {_uniqueStorage()._media = newValue}
  }

  public var memory: String {
    get {return _storage._memory}
    set {_uniqueStorage()._memory = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var online: String {
    get {return _storage._online}
    set {_uniqueStorage()._online = newValue}
  }

  public var os: String {
    get {return _storage._os}
    set {_uniqueStorage()._os = newValue}
  }

  public var output: String {
    get {return _storage._output}
    set {_uniqueStorage()._output = newValue}
  }

  public var platformLogo: Proto_PlatformLogo {
    get {return _storage._platformLogo ?? Proto_PlatformLogo()}
    set {_uniqueStorage()._platformLogo = newValue}
  }
  /// Returns true if `platformLogo` has been explicitly set.
  public var hasPlatformLogo: Bool {return _storage._platformLogo != nil}
  /// Clears the value of `platformLogo`. Subsequent reads from it will return its default value.
  public mutating func clearPlatformLogo() {_uniqueStorage()._platformLogo = nil}

  public var platformVersionReleaseDates: [Proto_PlatformVersionReleaseDate] {
    get {return _storage._platformVersionReleaseDates}
    set {_uniqueStorage()._platformVersionReleaseDates = newValue}
  }

  public var resolutions: String {
    get {return _storage._resolutions}
    set {_uniqueStorage()._resolutions = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var sound: String {
    get {return _storage._sound}
    set {_uniqueStorage()._sound = newValue}
  }

  public var storage: String {
    get {return _storage._storage}
    set {_uniqueStorage()._storage = newValue}
  }

  public var summary: String {
    get {return _storage._summary}
    set {_uniqueStorage()._summary = newValue}
  }

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PlatformVersionCompanyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var platformversioncompanies: [Proto_PlatformVersionCompany] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PlatformVersionCompany {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var comment: String {
    get {return _storage._comment}
    set {_uniqueStorage()._comment = newValue}
  }

  public var company: Proto_Company {
    get {return _storage._company ?? Proto_Company()}
    set {_uniqueStorage()._company = newValue}
  }
  /// Returns true if `company` has been explicitly set.
  public var hasCompany: Bool {return _storage._company != nil}
  /// Clears the value of `company`. Subsequent reads from it will return its default value.
  public mutating func clearCompany() {_uniqueStorage()._company = nil}

  public var developer: Bool {
    get {return _storage._developer}
    set {_uniqueStorage()._developer = newValue}
  }

  public var manufacturer: Bool {
    get {return _storage._manufacturer}
    set {_uniqueStorage()._manufacturer = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PlatformVersionReleaseDateResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var platformversionreleasedates: [Proto_PlatformVersionReleaseDate] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PlatformVersionReleaseDate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var category: Proto_DateFormatStartDateCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {_uniqueStorage()._date = nil}

  public var human: String {
    get {return _storage._human}
    set {_uniqueStorage()._human = newValue}
  }

  public var m: Int32 {
    get {return _storage._m}
    set {_uniqueStorage()._m = newValue}
  }

  public var platformVersion: Proto_PlatformVersion {
    get {return _storage._platformVersion ?? Proto_PlatformVersion()}
    set {_uniqueStorage()._platformVersion = newValue}
  }
  /// Returns true if `platformVersion` has been explicitly set.
  public var hasPlatformVersion: Bool {return _storage._platformVersion != nil}
  /// Clears the value of `platformVersion`. Subsequent reads from it will return its default value.
  public mutating func clearPlatformVersion() {_uniqueStorage()._platformVersion = nil}

  public var region: Proto_RegionLanguageEnum {
    get {return _storage._region}
    set {_uniqueStorage()._region = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var y: Int32 {
    get {return _storage._y}
    set {_uniqueStorage()._y = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PlatformWebsiteResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var platformwebsites: [Proto_PlatformWebsite] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PlatformWebsite {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var category: Proto_WebsiteCategoryEnum = .websiteCategoryNull

  public var trusted: Bool = false

  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PlayerPerspectiveResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var playerperspectives: [Proto_PlayerPerspective] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PlayerPerspective {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ProductFamilyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var productfamilies: [Proto_ProductFamily] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_ProductFamily {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var name: String = String()

  public var slug: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PulseResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pulses: [Proto_Pulse] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Pulse {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var author: String {
    get {return _storage._author}
    set {_uniqueStorage()._author = newValue}
  }

  public var category: Int32 {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var ignored: Bool {
    get {return _storage._ignored}
    set {_uniqueStorage()._ignored = newValue}
  }

  public var image: String {
    get {return _storage._image}
    set {_uniqueStorage()._image = newValue}
  }

  public var publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._publishedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._publishedAt = newValue}
  }
  /// Returns true if `publishedAt` has been explicitly set.
  public var hasPublishedAt: Bool {return _storage._publishedAt != nil}
  /// Clears the value of `publishedAt`. Subsequent reads from it will return its default value.
  public mutating func clearPublishedAt() {_uniqueStorage()._publishedAt = nil}

  public var pulseImage: Proto_PulseImage {
    get {return _storage._pulseImage ?? Proto_PulseImage()}
    set {_uniqueStorage()._pulseImage = newValue}
  }
  /// Returns true if `pulseImage` has been explicitly set.
  public var hasPulseImage: Bool {return _storage._pulseImage != nil}
  /// Clears the value of `pulseImage`. Subsequent reads from it will return its default value.
  public mutating func clearPulseImage() {_uniqueStorage()._pulseImage = nil}

  public var pulseSource: Proto_PulseSource {
    get {return _storage._pulseSource ?? Proto_PulseSource()}
    set {_uniqueStorage()._pulseSource = newValue}
  }
  /// Returns true if `pulseSource` has been explicitly set.
  public var hasPulseSource: Bool {return _storage._pulseSource != nil}
  /// Clears the value of `pulseSource`. Subsequent reads from it will return its default value.
  public mutating func clearPulseSource() {_uniqueStorage()._pulseSource = nil}

  public var summary: String {
    get {return _storage._summary}
    set {_uniqueStorage()._summary = newValue}
  }

  public var tags: [Int32] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var uid: String {
    get {return _storage._uid}
    set {_uniqueStorage()._uid = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var videos: [String] {
    get {return _storage._videos}
    set {_uniqueStorage()._videos = newValue}
  }

  public var website: Proto_PulseUrl {
    get {return _storage._website ?? Proto_PulseUrl()}
    set {_uniqueStorage()._website = newValue}
  }
  /// Returns true if `website` has been explicitly set.
  public var hasWebsite: Bool {return _storage._website != nil}
  /// Clears the value of `website`. Subsequent reads from it will return its default value.
  public mutating func clearWebsite() {_uniqueStorage()._website = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PulseGroupResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pulsegroups: [Proto_PulseGroup] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PulseGroup {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._publishedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._publishedAt = newValue}
  }
  /// Returns true if `publishedAt` has been explicitly set.
  public var hasPublishedAt: Bool {return _storage._publishedAt != nil}
  /// Clears the value of `publishedAt`. Subsequent reads from it will return its default value.
  public mutating func clearPublishedAt() {_uniqueStorage()._publishedAt = nil}

  public var pulses: [Proto_Pulse] {
    get {return _storage._pulses}
    set {_uniqueStorage()._pulses = newValue}
  }

  public var tags: [Int32] {
    get {return _storage._tags}
    set {_uniqueStorage()._tags = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PulseImageResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pulseimages: [Proto_PulseImage] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PulseImage {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var alphaChannel: Bool = false

  public var animated: Bool = false

  public var height: Int32 = 0

  public var imageID: String = String()

  public var url: String = String()

  public var width: Int32 = 0

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PulseSourceResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pulsesources: [Proto_PulseSource] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PulseSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var page: Proto_Page {
    get {return _storage._page ?? Proto_Page()}
    set {_uniqueStorage()._page = newValue}
  }
  /// Returns true if `page` has been explicitly set.
  public var hasPage: Bool {return _storage._page != nil}
  /// Clears the value of `page`. Subsequent reads from it will return its default value.
  public mutating func clearPage() {_uniqueStorage()._page = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_PulseUrlResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var pulseurls: [Proto_PulseUrl] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_PulseUrl {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var trusted: Bool = false

  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_RateResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var rates: [Proto_Rate] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Rate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var rating: Double {
    get {return _storage._rating}
    set {_uniqueStorage()._rating = newValue}
  }

  public var user: Proto_User {
    get {return _storage._user ?? Proto_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ReleaseDateResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var releasedates: [Proto_ReleaseDate] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_ReleaseDate {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var category: Proto_DateFormatStartDateCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var date: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._date ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._date = newValue}
  }
  /// Returns true if `date` has been explicitly set.
  public var hasDate: Bool {return _storage._date != nil}
  /// Clears the value of `date`. Subsequent reads from it will return its default value.
  public mutating func clearDate() {_uniqueStorage()._date = nil}

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var human: String {
    get {return _storage._human}
    set {_uniqueStorage()._human = newValue}
  }

  public var m: Int32 {
    get {return _storage._m}
    set {_uniqueStorage()._m = newValue}
  }

  public var platform: Proto_Platform {
    get {return _storage._platform ?? Proto_Platform()}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  public var region: Proto_RegionLanguageEnum {
    get {return _storage._region}
    set {_uniqueStorage()._region = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var y: Int32 {
    get {return _storage._y}
    set {_uniqueStorage()._y = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ReviewResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var reviews: [Proto_Review] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Review {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var category: Proto_ReviewCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var conclusion: String {
    get {return _storage._conclusion}
    set {_uniqueStorage()._conclusion = newValue}
  }

  public var content: String {
    get {return _storage._content}
    set {_uniqueStorage()._content = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var introduction: String {
    get {return _storage._introduction}
    set {_uniqueStorage()._introduction = newValue}
  }

  public var likes: Int32 {
    get {return _storage._likes}
    set {_uniqueStorage()._likes = newValue}
  }

  public var negativePoints: String {
    get {return _storage._negativePoints}
    set {_uniqueStorage()._negativePoints = newValue}
  }

  public var platform: Proto_Platform {
    get {return _storage._platform ?? Proto_Platform()}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  public var positivePoints: String {
    get {return _storage._positivePoints}
    set {_uniqueStorage()._positivePoints = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var user: Proto_User {
    get {return _storage._user ?? Proto_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var userRating: Proto_Rate {
    get {return _storage._userRating ?? Proto_Rate()}
    set {_uniqueStorage()._userRating = newValue}
  }
  /// Returns true if `userRating` has been explicitly set.
  public var hasUserRating: Bool {return _storage._userRating != nil}
  /// Clears the value of `userRating`. Subsequent reads from it will return its default value.
  public mutating func clearUserRating() {_uniqueStorage()._userRating = nil}

  public var video: Proto_ReviewVideo {
    get {return _storage._video ?? Proto_ReviewVideo()}
    set {_uniqueStorage()._video = newValue}
  }
  /// Returns true if `video` has been explicitly set.
  public var hasVideo: Bool {return _storage._video != nil}
  /// Clears the value of `video`. Subsequent reads from it will return its default value.
  public mutating func clearVideo() {_uniqueStorage()._video = nil}

  public var views: Int32 {
    get {return _storage._views}
    set {_uniqueStorage()._views = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ReviewVideoResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var reviewvideos: [Proto_ReviewVideo] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_ReviewVideo {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 = 0

  public var trusted: Bool = false

  public var url: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_ScreenshotResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var screenshots: [Proto_Screenshot] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Screenshot {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var alphaChannel: Bool {
    get {return _storage._alphaChannel}
    set {_uniqueStorage()._alphaChannel = newValue}
  }

  public var animated: Bool {
    get {return _storage._animated}
    set {_uniqueStorage()._animated = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var height: Int32 {
    get {return _storage._height}
    set {_uniqueStorage()._height = newValue}
  }

  public var imageID: String {
    get {return _storage._imageID}
    set {_uniqueStorage()._imageID = newValue}
  }

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var width: Int32 {
    get {return _storage._width}
    set {_uniqueStorage()._width = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_SearchResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var searches: [Proto_Search] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Search {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var alternativeName: String {
    get {return _storage._alternativeName}
    set {_uniqueStorage()._alternativeName = newValue}
  }

  public var character: Proto_Character {
    get {return _storage._character ?? Proto_Character()}
    set {_uniqueStorage()._character = newValue}
  }
  /// Returns true if `character` has been explicitly set.
  public var hasCharacter: Bool {return _storage._character != nil}
  /// Clears the value of `character`. Subsequent reads from it will return its default value.
  public mutating func clearCharacter() {_uniqueStorage()._character = nil}

  public var collection: Proto_Collection {
    get {return _storage._collection ?? Proto_Collection()}
    set {_uniqueStorage()._collection = newValue}
  }
  /// Returns true if `collection` has been explicitly set.
  public var hasCollection: Bool {return _storage._collection != nil}
  /// Clears the value of `collection`. Subsequent reads from it will return its default value.
  public mutating func clearCollection() {_uniqueStorage()._collection = nil}

  public var company: Proto_Company {
    get {return _storage._company ?? Proto_Company()}
    set {_uniqueStorage()._company = newValue}
  }
  /// Returns true if `company` has been explicitly set.
  public var hasCompany: Bool {return _storage._company != nil}
  /// Clears the value of `company`. Subsequent reads from it will return its default value.
  public mutating func clearCompany() {_uniqueStorage()._company = nil}

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var person: Proto_Person {
    get {return _storage._person ?? Proto_Person()}
    set {_uniqueStorage()._person = newValue}
  }
  /// Returns true if `person` has been explicitly set.
  public var hasPerson: Bool {return _storage._person != nil}
  /// Clears the value of `person`. Subsequent reads from it will return its default value.
  public mutating func clearPerson() {_uniqueStorage()._person = nil}

  public var platform: Proto_Platform {
    get {return _storage._platform ?? Proto_Platform()}
    set {_uniqueStorage()._platform = newValue}
  }
  /// Returns true if `platform` has been explicitly set.
  public var hasPlatform: Bool {return _storage._platform != nil}
  /// Clears the value of `platform`. Subsequent reads from it will return its default value.
  public mutating func clearPlatform() {_uniqueStorage()._platform = nil}

  public var popularity: Double {
    get {return _storage._popularity}
    set {_uniqueStorage()._popularity = newValue}
  }

  public var publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._publishedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._publishedAt = newValue}
  }
  /// Returns true if `publishedAt` has been explicitly set.
  public var hasPublishedAt: Bool {return _storage._publishedAt != nil}
  /// Clears the value of `publishedAt`. Subsequent reads from it will return its default value.
  public mutating func clearPublishedAt() {_uniqueStorage()._publishedAt = nil}

  public var testDummy: Proto_TestDummy {
    get {return _storage._testDummy ?? Proto_TestDummy()}
    set {_uniqueStorage()._testDummy = newValue}
  }
  /// Returns true if `testDummy` has been explicitly set.
  public var hasTestDummy: Bool {return _storage._testDummy != nil}
  /// Clears the value of `testDummy`. Subsequent reads from it will return its default value.
  public mutating func clearTestDummy() {_uniqueStorage()._testDummy = nil}

  public var theme: Proto_Theme {
    get {return _storage._theme ?? Proto_Theme()}
    set {_uniqueStorage()._theme = newValue}
  }
  /// Returns true if `theme` has been explicitly set.
  public var hasTheme: Bool {return _storage._theme != nil}
  /// Clears the value of `theme`. Subsequent reads from it will return its default value.
  public mutating func clearTheme() {_uniqueStorage()._theme = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_SocialMetricResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var socialmetrics: [Proto_SocialMetric] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_SocialMetric {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var category: Proto_SocialMetricCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var socialMetricSource: Proto_SocialMetricSource {
    get {return _storage._socialMetricSource ?? Proto_SocialMetricSource()}
    set {_uniqueStorage()._socialMetricSource = newValue}
  }
  /// Returns true if `socialMetricSource` has been explicitly set.
  public var hasSocialMetricSource: Bool {return _storage._socialMetricSource != nil}
  /// Clears the value of `socialMetricSource`. Subsequent reads from it will return its default value.
  public mutating func clearSocialMetricSource() {_uniqueStorage()._socialMetricSource = nil}

  public var value: Int32 {
    get {return _storage._value}
    set {_uniqueStorage()._value = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_SocialMetricSourceResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var socialmetricsources: [Proto_SocialMetricSource] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_SocialMetricSource {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var category: Int32 {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var channel: String {
    get {return _storage._channel}
    set {_uniqueStorage()._channel = newValue}
  }

  public var channelTitle: String {
    get {return _storage._channelTitle}
    set {_uniqueStorage()._channelTitle = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var duration: Int32 {
    get {return _storage._duration}
    set {_uniqueStorage()._duration = newValue}
  }

  public var externalID: String {
    get {return _storage._externalID}
    set {_uniqueStorage()._externalID = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var internalName: String {
    get {return _storage._internalName}
    set {_uniqueStorage()._internalName = newValue}
  }

  public var meta: String {
    get {return _storage._meta}
    set {_uniqueStorage()._meta = newValue}
  }

  public var metricTags: [String] {
    get {return _storage._metricTags}
    set {_uniqueStorage()._metricTags = newValue}
  }

  public var publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._publishedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._publishedAt = newValue}
  }
  /// Returns true if `publishedAt` has been explicitly set.
  public var hasPublishedAt: Bool {return _storage._publishedAt != nil}
  /// Clears the value of `publishedAt`. Subsequent reads from it will return its default value.
  public mutating func clearPublishedAt() {_uniqueStorage()._publishedAt = nil}

  public var socialMetrics: [Proto_SocialMetric] {
    get {return _storage._socialMetrics}
    set {_uniqueStorage()._socialMetrics = newValue}
  }

  public var socialNetwork: Proto_SocialMetricSourceSocialNetworkEnum {
    get {return _storage._socialNetwork}
    set {_uniqueStorage()._socialNetwork = newValue}
  }

  public var title: String {
    get {return _storage._title}
    set {_uniqueStorage()._title = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_TestDummyResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var testdummies: [Proto_TestDummy] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_TestDummy {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var boolValue: Bool {
    get {return _storage._boolValue}
    set {_uniqueStorage()._boolValue = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var enumTest: Proto_TestDummyEnumTestEnum {
    get {return _storage._enumTest}
    set {_uniqueStorage()._enumTest = newValue}
  }

  public var floatValue: Double {
    get {return _storage._floatValue}
    set {_uniqueStorage()._floatValue = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var integerArray: [Int32] {
    get {return _storage._integerArray}
    set {_uniqueStorage()._integerArray = newValue}
  }

  public var integerValue: Int32 {
    get {return _storage._integerValue}
    set {_uniqueStorage()._integerValue = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var newIntegerValue: Int32 {
    get {return _storage._newIntegerValue}
    set {_uniqueStorage()._newIntegerValue = newValue}
  }

  public var `private`: Bool {
    get {return _storage._private}
    set {_uniqueStorage()._private = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var stringArray: [String] {
    get {return _storage._stringArray}
    set {_uniqueStorage()._stringArray = newValue}
  }

  public var testDummies: [Proto_TestDummy] {
    get {return _storage._testDummies}
    set {_uniqueStorage()._testDummies = newValue}
  }

  public var testDummy: Proto_TestDummy {
    get {return _storage._testDummy ?? Proto_TestDummy()}
    set {_uniqueStorage()._testDummy = newValue}
  }
  /// Returns true if `testDummy` has been explicitly set.
  public var hasTestDummy: Bool {return _storage._testDummy != nil}
  /// Clears the value of `testDummy`. Subsequent reads from it will return its default value.
  public mutating func clearTestDummy() {_uniqueStorage()._testDummy = nil}

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var user: Proto_User {
    get {return _storage._user ?? Proto_User()}
    set {_uniqueStorage()._user = newValue}
  }
  /// Returns true if `user` has been explicitly set.
  public var hasUser: Bool {return _storage._user != nil}
  /// Clears the value of `user`. Subsequent reads from it will return its default value.
  public mutating func clearUser() {_uniqueStorage()._user = nil}

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_ThemeResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var themes: [Proto_Theme] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Theme {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_TimeToBeatResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var timetobeats: [Proto_TimeToBeat] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_TimeToBeat {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var completely: Int32 {
    get {return _storage._completely}
    set {_uniqueStorage()._completely = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var hastly: Int32 {
    get {return _storage._hastly}
    set {_uniqueStorage()._hastly = newValue}
  }

  public var normally: Int32 {
    get {return _storage._normally}
    set {_uniqueStorage()._normally = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_TitleResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var titles: [Proto_Title] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Title {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var description_p: String {
    get {return _storage._description_p}
    set {_uniqueStorage()._description_p = newValue}
  }

  public var games: [Proto_Game] {
    get {return _storage._games}
    set {_uniqueStorage()._games = newValue}
  }

  public var name: String {
    get {return _storage._name}
    set {_uniqueStorage()._name = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_UserResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var users: [Proto_User] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_User {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var battlenet: String {
    get {return _storage._battlenet}
    set {_uniqueStorage()._battlenet = newValue}
  }

  public var color: Proto_ColorColorEnum {
    get {return _storage._color}
    set {_uniqueStorage()._color = newValue}
  }

  public var createdAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._createdAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._createdAt = newValue}
  }
  /// Returns true if `createdAt` has been explicitly set.
  public var hasCreatedAt: Bool {return _storage._createdAt != nil}
  /// Clears the value of `createdAt`. Subsequent reads from it will return its default value.
  public mutating func clearCreatedAt() {_uniqueStorage()._createdAt = nil}

  public var discord: String {
    get {return _storage._discord}
    set {_uniqueStorage()._discord = newValue}
  }

  public var facebook: String {
    get {return _storage._facebook}
    set {_uniqueStorage()._facebook = newValue}
  }

  public var googlePlus: String {
    get {return _storage._googlePlus}
    set {_uniqueStorage()._googlePlus = newValue}
  }

  public var instagram: String {
    get {return _storage._instagram}
    set {_uniqueStorage()._instagram = newValue}
  }

  public var linkedin: String {
    get {return _storage._linkedin}
    set {_uniqueStorage()._linkedin = newValue}
  }

  public var origin: String {
    get {return _storage._origin}
    set {_uniqueStorage()._origin = newValue}
  }

  public var pinterest: String {
    get {return _storage._pinterest}
    set {_uniqueStorage()._pinterest = newValue}
  }

  public var presentation: String {
    get {return _storage._presentation}
    set {_uniqueStorage()._presentation = newValue}
  }

  public var reddit: String {
    get {return _storage._reddit}
    set {_uniqueStorage()._reddit = newValue}
  }

  public var role: Proto_UserRoleEnum {
    get {return _storage._role}
    set {_uniqueStorage()._role = newValue}
  }

  public var slug: String {
    get {return _storage._slug}
    set {_uniqueStorage()._slug = newValue}
  }

  public var soundcloud: String {
    get {return _storage._soundcloud}
    set {_uniqueStorage()._soundcloud = newValue}
  }

  public var steam: String {
    get {return _storage._steam}
    set {_uniqueStorage()._steam = newValue}
  }

  public var twitch: String {
    get {return _storage._twitch}
    set {_uniqueStorage()._twitch = newValue}
  }

  public var twitter: String {
    get {return _storage._twitter}
    set {_uniqueStorage()._twitter = newValue}
  }

  public var updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp {
    get {return _storage._updatedAt ?? SwiftProtobuf.Google_Protobuf_Timestamp()}
    set {_uniqueStorage()._updatedAt = newValue}
  }
  /// Returns true if `updatedAt` has been explicitly set.
  public var hasUpdatedAt: Bool {return _storage._updatedAt != nil}
  /// Clears the value of `updatedAt`. Subsequent reads from it will return its default value.
  public mutating func clearUpdatedAt() {_uniqueStorage()._updatedAt = nil}

  public var uplay: String {
    get {return _storage._uplay}
    set {_uniqueStorage()._uplay = newValue}
  }

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var username: String {
    get {return _storage._username}
    set {_uniqueStorage()._username = newValue}
  }

  public var youtube: String {
    get {return _storage._youtube}
    set {_uniqueStorage()._youtube = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

public struct Proto_WebsiteResult {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var websites: [Proto_Website] = []

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

public struct Proto_Website {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  public var id: UInt64 {
    get {return _storage._id}
    set {_uniqueStorage()._id = newValue}
  }

  public var category: Proto_WebsiteCategoryEnum {
    get {return _storage._category}
    set {_uniqueStorage()._category = newValue}
  }

  public var game: Proto_Game {
    get {return _storage._game ?? Proto_Game()}
    set {_uniqueStorage()._game = newValue}
  }
  /// Returns true if `game` has been explicitly set.
  public var hasGame: Bool {return _storage._game != nil}
  /// Clears the value of `game`. Subsequent reads from it will return its default value.
  public mutating func clearGame() {_uniqueStorage()._game = nil}

  public var trusted: Bool {
    get {return _storage._trusted}
    set {_uniqueStorage()._trusted = newValue}
  }

  public var url: String {
    get {return _storage._url}
    set {_uniqueStorage()._url = newValue}
  }

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}

  fileprivate var _storage = _StorageClass.defaultInstance
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "proto"

extension Proto_AchievementCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACHIEVEMENT_CATEGORY_NULL"),
    1: .same(proto: "PLAYSTATION"),
    2: .same(proto: "XBOX"),
    3: .same(proto: "STEAM"),
  ]
}

extension Proto_RegionLanguageEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REGION_LANGUAGE_NULL"),
    1: .same(proto: "EUROPE"),
    2: .same(proto: "NORTH_AMERICA"),
    3: .same(proto: "AUSTRALIA"),
    4: .same(proto: "NEW_ZELAND"),
    5: .same(proto: "JAPAN"),
    6: .same(proto: "CHINA"),
    7: .same(proto: "ASIA"),
    8: .same(proto: "WORLDWIDE"),
    9: .same(proto: "HONG_KONG"),
    10: .same(proto: "SOUTH_KOREA"),
  ]
}

extension Proto_AchievementRankEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "ACHIEVEMENT_RANK_NULL"),
    1: .same(proto: "BRONZE"),
    2: .same(proto: "SILVER"),
    3: .same(proto: "GOLD"),
    4: .same(proto: "PLATINUM"),
  ]
}

extension Proto_AgeRatingCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AGERATING_CATEGORY_NULL"),
    1: .same(proto: "ESRB"),
    2: .same(proto: "PEGI"),
  ]
}

extension Proto_AgeRatingRatingEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "AGERATING_RATING_NULL"),
    1: .same(proto: "THREE"),
    2: .same(proto: "SEVEN"),
    3: .same(proto: "TWELVE"),
    4: .same(proto: "SIXTEEN"),
    5: .same(proto: "EIGHTEEN"),
    6: .same(proto: "RP"),
    7: .same(proto: "EC"),
    8: .same(proto: "E"),
    9: .same(proto: "E10"),
    10: .same(proto: "T"),
    11: .same(proto: "M"),
    12: .same(proto: "AO"),
  ]
}

extension Proto_GenderGenderEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GENDER_GENDER_NULL"),
    1: .same(proto: "MALE"),
    2: .same(proto: "FEMALE"),
    3: .same(proto: "OTHER"),
  ]
}

extension Proto_CharacterSpeciesEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CHARACTER_SPECIES_NULL"),
    1: .same(proto: "HUMAN"),
    2: .same(proto: "ALIEN"),
    3: .same(proto: "ANIMAL"),
    4: .same(proto: "ANDROID"),
    5: .same(proto: "UNKNOWN"),
  ]
}

extension Proto_DateFormatStartDateCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "YYYYMMMMDD"),
    1: .same(proto: "YYYYMMMM"),
    2: .same(proto: "YYYY"),
    3: .same(proto: "YYYYQ1"),
    4: .same(proto: "YYYYQ2"),
    5: .same(proto: "YYYYQ3"),
    6: .same(proto: "YYYYQ4"),
    7: .same(proto: "TBD"),
  ]
}

extension Proto_WebsiteCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "WEBSITE_CATEGORY_NULL"),
    1: .same(proto: "WEBSITE_OFFICIAL"),
    2: .same(proto: "WEBSITE_WIKIA"),
    3: .same(proto: "WEBSITE_WIKIPEDIA"),
    4: .same(proto: "WEBSITE_FACEBOOK"),
    5: .same(proto: "WEBSITE_TWITTER"),
    6: .same(proto: "WEBSITE_TWITCH"),
    8: .same(proto: "WEBSITE_INSTAGRAM"),
    9: .same(proto: "WEBSITE_YOUTUBE"),
    10: .same(proto: "WEBSITE_IPHONE"),
    11: .same(proto: "WEBSITE_IPAD"),
    12: .same(proto: "WEBSITE_ANDROID"),
    13: .same(proto: "WEBSITE_STEAM"),
    14: .same(proto: "WEBSITE_REDDIT"),
    15: .same(proto: "WEBSITE_DISCORD"),
    16: .same(proto: "WEBSITE_GOOGLE_PLUS"),
    17: .same(proto: "WEBSITE_TUMBLR"),
    18: .same(proto: "WEBSITE_LINKEDIN"),
    19: .same(proto: "WEBSITE_PINTEREST"),
    20: .same(proto: "WEBSITE_SOUNDCLOUD"),
  ]
}

extension Proto_CreditCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "CREDIT_CATEGORY_NULL"),
    1: .same(proto: "VOICE_ACTOR"),
    2: .same(proto: "LANGUAGE"),
    3: .same(proto: "COMPANY_CREDIT"),
    4: .same(proto: "EMPLOYEE"),
    5: .same(proto: "MISC"),
    6: .same(proto: "SUPPORT_COMPANY"),
  ]
}

extension Proto_ExternalGameCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "EXTERNALGAME_CATEGORY_NULL"),
    1: .same(proto: "EXTERNALGAME_STEAM"),
    5: .same(proto: "EXTERNALGAME_GOG"),
    10: .same(proto: "EXTERNALGAME_YOUTUBE"),
    11: .same(proto: "EXTERNALGAME_MICROSOFT"),
    13: .same(proto: "EXTERNALGAME_APPLE"),
    14: .same(proto: "EXTERNALGAME_TWITCH"),
    15: .same(proto: "EXTERNALGAME_ANDROID"),
  ]
}

extension Proto_FeedCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "FEED_CATEGORY_NULL"),
    1: .same(proto: "PULSE_ARTICLE"),
    2: .same(proto: "COMING_SOON"),
    3: .same(proto: "NEW_TRAILER"),
    5: .same(proto: "USER_CONTRIBUTED_ITEM"),
    6: .same(proto: "USER_CONTRIBUTIONS_ITEM"),
    7: .same(proto: "PAGE_CONTRIBUTED_ITEM"),
  ]
}

extension Proto_GameCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "MAIN_GAME"),
    1: .same(proto: "DLC_ADDON"),
    2: .same(proto: "EXPANSION"),
    3: .same(proto: "BUNDLE"),
    4: .same(proto: "STANDALONE_EXPANSION"),
  ]
}

extension Proto_GameStatusEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "RELEASED"),
    2: .same(proto: "ALPHA"),
    3: .same(proto: "BETA"),
    4: .same(proto: "EARLY_ACCESS"),
    5: .same(proto: "OFFLINE"),
    6: .same(proto: "CANCELLED"),
  ]
}

extension Proto_GameVersionFeatureCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "BOOLEAN"),
    1: .same(proto: "DESCRIPTION"),
  ]
}

extension Proto_GameVersionFeatureValueIncludedFeatureEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "NOT_INCLUDED"),
    1: .same(proto: "INCLUDED"),
    2: .same(proto: "PRE_ORDER_ONLY"),
  ]
}

extension Proto_PageCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PAGE_CATEGORY_NULL"),
    1: .same(proto: "PERSONALITY"),
    2: .same(proto: "MEDIA_ORGANIZATION"),
    3: .same(proto: "CONTENT_CREATOR"),
    4: .same(proto: "CLAN_TEAM"),
  ]
}

extension Proto_ColorColorEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "GREEN"),
    1: .same(proto: "BLUE"),
    2: .same(proto: "RED"),
    3: .same(proto: "ORANGE"),
    4: .same(proto: "PINK"),
    5: .same(proto: "YELLOW"),
  ]
}

extension Proto_PageSubCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PAGE_SUB_CATEGORY_NULL"),
    1: .same(proto: "USER"),
    2: .same(proto: "GAME"),
    3: .same(proto: "COMPANY"),
    4: .same(proto: "CONSUMER"),
    5: .same(proto: "INDUSTRY"),
    6: .same(proto: "E_SPORTS"),
  ]
}

extension Proto_PlatformCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "PLATFORM_CATEGORY_NULL"),
    1: .same(proto: "CONSOLE"),
    2: .same(proto: "ARCADE"),
    3: .same(proto: "PLATFORM"),
    4: .same(proto: "OPERATING_SYSTEM"),
    5: .same(proto: "PORTABLE_CONSOLE"),
    6: .same(proto: "COMPUTER"),
  ]
}

extension Proto_ReviewCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "REVIEW_CATEGORY_NULL"),
    1: .same(proto: "TEXT"),
    2: .same(proto: "VIDEO"),
  ]
}

extension Proto_SocialMetricCategoryEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOCIALMETRIC_CATEGORY_NULL"),
    1: .same(proto: "FOLLOWS"),
    2: .same(proto: "LIKES"),
    3: .same(proto: "HATES"),
    4: .same(proto: "SHARES"),
    5: .same(proto: "VIEW"),
    6: .same(proto: "COMMENTS"),
    7: .same(proto: "FAVORITES"),
  ]
}

extension Proto_SocialMetricSourceSocialNetworkEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "SOCIALMETRICSOURCE_SOCIAL_NETWORK_NULL"),
    1: .same(proto: "SOCIALMETRICSOURCE_OFFICIAL"),
    2: .same(proto: "SOCIALMETRICSOURCE_WIKIA"),
    3: .same(proto: "SOCIALMETRICSOURCE_WIKIPEDIA"),
    4: .same(proto: "SOCIALMETRICSOURCE_FACEBOOK"),
    5: .same(proto: "SOCIALMETRICSOURCE_TWITTER"),
    6: .same(proto: "SOCIALMETRICSOURCE_TWITCH"),
    8: .same(proto: "SOCIALMETRICSOURCE_INSTAGRAM"),
    9: .same(proto: "SOCIALMETRICSOURCE_YOUTUBE"),
    10: .same(proto: "SOCIALMETRICSOURCE_IPHONE"),
    11: .same(proto: "SOCIALMETRICSOURCE_IPAD"),
    12: .same(proto: "SOCIALMETRICSOURCE_ANDROID"),
    13: .same(proto: "SOCIALMETRICSOURCE_STEAM"),
    14: .same(proto: "SOCIALMETRICSOURCE_REDDIT"),
  ]
}

extension Proto_TestDummyEnumTestEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "TESTDUMMY_ENUM_TEST_NULL"),
    1: .same(proto: "ENUM1"),
    2: .same(proto: "ENUM2"),
  ]
}

extension Proto_UserRoleEnum: SwiftProtobuf._ProtoNameProviding {
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    0: .same(proto: "USER_ROLE_NULL"),
    1: .same(proto: "USER_USER"),
    2: .same(proto: "USER_ADVANCED_USER"),
    3: .same(proto: "USER_SUPER_ADVANCED_USER"),
    4: .same(proto: "USER_KEEPER"),
    9: .same(proto: "USER_ADMIN"),
    10: .same(proto: "USER_SUPER_ADMIN"),
  ]
}

extension Proto_Count: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Count"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularInt64Field(value: &self.count)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Count, rhs: Proto_Count) -> Bool {
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_MultiQueryResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiQueryResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "name"),
    2: .same(proto: "results"),
    3: .same(proto: "count"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.name)
      case 2: try decoder.decodeRepeatedBytesField(value: &self.results)
      case 3: try decoder.decodeSingularInt64Field(value: &self.count)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 1)
    }
    if !self.results.isEmpty {
      try visitor.visitRepeatedBytesField(value: self.results, fieldNumber: 2)
    }
    if self.count != 0 {
      try visitor.visitSingularInt64Field(value: self.count, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_MultiQueryResult, rhs: Proto_MultiQueryResult) -> Bool {
    if lhs.name != rhs.name {return false}
    if lhs.results != rhs.results {return false}
    if lhs.count != rhs.count {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_MultiQueryResultArray: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiQueryResultArray"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "result"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.result)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.result.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.result, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_MultiQueryResultArray, rhs: Proto_MultiQueryResultArray) -> Bool {
    if lhs.result != rhs.result {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AchievementResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AchievementResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "achievements"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.achievements)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.achievements.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.achievements, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AchievementResult, rhs: Proto_AchievementResult) -> Bool {
    if lhs.achievements != rhs.achievements {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Achievement: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Achievement"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "achievementIcon"),
    3: .same(proto: "category"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "description"),
    6: .same(proto: "externalId"),
    7: .same(proto: "game"),
    8: .same(proto: "language"),
    9: .same(proto: "name"),
    10: .same(proto: "owners"),
    11: .same(proto: "ownersPercentage"),
    12: .same(proto: "rank"),
    13: .same(proto: "slug"),
    14: .same(proto: "tags"),
    15: .same(proto: "updatedAt"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _achievementIcon: Proto_AchievementIcon? = nil
    var _category: Proto_AchievementCategoryEnum = .achievementCategoryNull
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _externalID: String = String()
    var _game: Proto_Game? = nil
    var _language: Proto_RegionLanguageEnum = .regionLanguageNull
    var _name: String = String()
    var _owners: Int32 = 0
    var _ownersPercentage: Double = 0
    var _rank: Proto_AchievementRankEnum = .achievementRankNull
    var _slug: String = String()
    var _tags: [Int32] = []
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _achievementIcon = source._achievementIcon
      _category = source._category
      _createdAt = source._createdAt
      _description_p = source._description_p
      _externalID = source._externalID
      _game = source._game
      _language = source._language
      _name = source._name
      _owners = source._owners
      _ownersPercentage = source._ownersPercentage
      _rank = source._rank
      _slug = source._slug
      _tags = source._tags
      _updatedAt = source._updatedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._achievementIcon)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 6: try decoder.decodeSingularStringField(value: &_storage._externalID)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._language)
        case 9: try decoder.decodeSingularStringField(value: &_storage._name)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._owners)
        case 11: try decoder.decodeSingularDoubleField(value: &_storage._ownersPercentage)
        case 12: try decoder.decodeSingularEnumField(value: &_storage._rank)
        case 13: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 14: try decoder.decodeRepeatedInt32Field(value: &_storage._tags)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._achievementIcon {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._category != .achievementCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 3)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
      if !_storage._externalID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalID, fieldNumber: 6)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._language != .regionLanguageNull {
        try visitor.visitSingularEnumField(value: _storage._language, fieldNumber: 8)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 9)
      }
      if _storage._owners != 0 {
        try visitor.visitSingularInt32Field(value: _storage._owners, fieldNumber: 10)
      }
      if _storage._ownersPercentage != 0 {
        try visitor.visitSingularDoubleField(value: _storage._ownersPercentage, fieldNumber: 11)
      }
      if _storage._rank != .achievementRankNull {
        try visitor.visitSingularEnumField(value: _storage._rank, fieldNumber: 12)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 13)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._tags, fieldNumber: 14)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Achievement, rhs: Proto_Achievement) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._achievementIcon != rhs_storage._achievementIcon {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._externalID != rhs_storage._externalID {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._language != rhs_storage._language {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._owners != rhs_storage._owners {return false}
        if _storage._ownersPercentage != rhs_storage._ownersPercentage {return false}
        if _storage._rank != rhs_storage._rank {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AchievementIconResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AchievementIconResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "achievementicons"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.achievementicons)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.achievementicons.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.achievementicons, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AchievementIconResult, rhs: Proto_AchievementIconResult) -> Bool {
    if lhs.achievementicons != rhs.achievementicons {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AchievementIcon: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AchievementIcon"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "height"),
    5: .same(proto: "imageId"),
    6: .same(proto: "url"),
    7: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.alphaChannel)
      case 3: try decoder.decodeSingularBoolField(value: &self.animated)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.imageID)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.alphaChannel != false {
      try visitor.visitSingularBoolField(value: self.alphaChannel, fieldNumber: 2)
    }
    if self.animated != false {
      try visitor.visitSingularBoolField(value: self.animated, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AchievementIcon, rhs: Proto_AchievementIcon) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.alphaChannel != rhs.alphaChannel {return false}
    if lhs.animated != rhs.animated {return false}
    if lhs.height != rhs.height {return false}
    if lhs.imageID != rhs.imageID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AgeRatingResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AgeRatingResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ageratings"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.ageratings)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ageratings.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ageratings, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AgeRatingResult, rhs: Proto_AgeRatingResult) -> Bool {
    if lhs.ageratings != rhs.ageratings {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AgeRating: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AgeRating"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "contentDescriptions"),
    4: .same(proto: "rating"),
    5: .same(proto: "ratingCoverUrl"),
    6: .same(proto: "synopsis"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.category)
      case 3: try decoder.decodeRepeatedMessageField(value: &self.contentDescriptions)
      case 4: try decoder.decodeSingularEnumField(value: &self.rating)
      case 5: try decoder.decodeSingularStringField(value: &self.ratingCoverURL)
      case 6: try decoder.decodeSingularStringField(value: &self.synopsis)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.category != .ageratingCategoryNull {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 2)
    }
    if !self.contentDescriptions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.contentDescriptions, fieldNumber: 3)
    }
    if self.rating != .ageratingRatingNull {
      try visitor.visitSingularEnumField(value: self.rating, fieldNumber: 4)
    }
    if !self.ratingCoverURL.isEmpty {
      try visitor.visitSingularStringField(value: self.ratingCoverURL, fieldNumber: 5)
    }
    if !self.synopsis.isEmpty {
      try visitor.visitSingularStringField(value: self.synopsis, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AgeRating, rhs: Proto_AgeRating) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.category != rhs.category {return false}
    if lhs.contentDescriptions != rhs.contentDescriptions {return false}
    if lhs.rating != rhs.rating {return false}
    if lhs.ratingCoverURL != rhs.ratingCoverURL {return false}
    if lhs.synopsis != rhs.synopsis {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AgeRatingContentDescriptionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AgeRatingContentDescriptionResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "ageratingcontentdescriptions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.ageratingcontentdescriptions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.ageratingcontentdescriptions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.ageratingcontentdescriptions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AgeRatingContentDescriptionResult, rhs: Proto_AgeRatingContentDescriptionResult) -> Bool {
    if lhs.ageratingcontentdescriptions != rhs.ageratingcontentdescriptions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AgeRatingContentDescription: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AgeRatingContentDescription"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "description"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.category)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.category != .ageratingRatingNull {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AgeRatingContentDescription, rhs: Proto_AgeRatingContentDescription) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.category != rhs.category {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AlternativeNameResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AlternativeNameResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "alternativenames"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.alternativenames)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.alternativenames.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.alternativenames, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AlternativeNameResult, rhs: Proto_AlternativeNameResult) -> Bool {
    if lhs.alternativenames != rhs.alternativenames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_AlternativeName: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".AlternativeName"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "comment"),
    3: .same(proto: "game"),
    4: .same(proto: "name"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _comment: String = String()
    var _game: Proto_Game? = nil
    var _name: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _comment = source._comment
      _game = source._game
      _name = source._name
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._comment)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._comment.isEmpty {
        try visitor.visitSingularStringField(value: _storage._comment, fieldNumber: 2)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_AlternativeName, rhs: Proto_AlternativeName) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._comment != rhs_storage._comment {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._name != rhs_storage._name {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ApiTokenResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApiTokenResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "apitokens"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.apitokens)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.apitokens.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.apitokens, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ApiTokenResult, rhs: Proto_ApiTokenResult) -> Bool {
    if lhs.apitokens != rhs.apitokens {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ApiToken: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ApiToken"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "expiresIn"),
    4: .same(proto: "token"),
    5: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _expiresIn: Int32 = 0
    var _token: String = String()
    var _user: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _expiresIn = source._expiresIn
      _token = source._token
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._expiresIn)
        case 4: try decoder.decodeSingularStringField(value: &_storage._token)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._expiresIn != 0 {
        try visitor.visitSingularInt32Field(value: _storage._expiresIn, fieldNumber: 3)
      }
      if !_storage._token.isEmpty {
        try visitor.visitSingularStringField(value: _storage._token, fieldNumber: 4)
      }
      if _storage._user != 0 {
        try visitor.visitSingularInt32Field(value: _storage._user, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ApiToken, rhs: Proto_ApiToken) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._expiresIn != rhs_storage._expiresIn {return false}
        if _storage._token != rhs_storage._token {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ArtworkResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ArtworkResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "artworks"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.artworks)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.artworks.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.artworks, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ArtworkResult, rhs: Proto_ArtworkResult) -> Bool {
    if lhs.artworks != rhs.artworks {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Artwork: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Artwork"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "game"),
    5: .same(proto: "height"),
    6: .same(proto: "imageId"),
    7: .same(proto: "url"),
    8: .same(proto: "width"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _alphaChannel: Bool = false
    var _animated: Bool = false
    var _game: Proto_Game? = nil
    var _height: Int32 = 0
    var _imageID: String = String()
    var _url: String = String()
    var _width: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _alphaChannel = source._alphaChannel
      _animated = source._animated
      _game = source._game
      _height = source._height
      _imageID = source._imageID
      _url = source._url
      _width = source._width
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._alphaChannel)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._animated)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._height)
        case 6: try decoder.decodeSingularStringField(value: &_storage._imageID)
        case 7: try decoder.decodeSingularStringField(value: &_storage._url)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._width)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._alphaChannel != false {
        try visitor.visitSingularBoolField(value: _storage._alphaChannel, fieldNumber: 2)
      }
      if _storage._animated != false {
        try visitor.visitSingularBoolField(value: _storage._animated, fieldNumber: 3)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt32Field(value: _storage._height, fieldNumber: 5)
      }
      if !_storage._imageID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageID, fieldNumber: 6)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 7)
      }
      if _storage._width != 0 {
        try visitor.visitSingularInt32Field(value: _storage._width, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Artwork, rhs: Proto_Artwork) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._alphaChannel != rhs_storage._alphaChannel {return false}
        if _storage._animated != rhs_storage._animated {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._imageID != rhs_storage._imageID {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._width != rhs_storage._width {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CharacterResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CharacterResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "characters"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.characters)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.characters.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.characters, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CharacterResult, rhs: Proto_CharacterResult) -> Bool {
    if lhs.characters != rhs.characters {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Character: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Character"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "akas"),
    3: .same(proto: "countryName"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "description"),
    6: .same(proto: "games"),
    7: .same(proto: "gender"),
    8: .same(proto: "mugShot"),
    9: .same(proto: "name"),
    10: .same(proto: "people"),
    11: .same(proto: "slug"),
    12: .same(proto: "species"),
    13: .same(proto: "updatedAt"),
    14: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _akas: [String] = []
    var _countryName: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _games: [Proto_Game] = []
    var _gender: Proto_GenderGenderEnum = .genderGenderNull
    var _mugShot: Proto_CharacterMugShot? = nil
    var _name: String = String()
    var _people: [Proto_Person] = []
    var _slug: String = String()
    var _species: Proto_CharacterSpeciesEnum = .characterSpeciesNull
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _akas = source._akas
      _countryName = source._countryName
      _createdAt = source._createdAt
      _description_p = source._description_p
      _games = source._games
      _gender = source._gender
      _mugShot = source._mugShot
      _name = source._name
      _people = source._people
      _slug = source._slug
      _species = source._species
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeRepeatedStringField(value: &_storage._akas)
        case 3: try decoder.decodeSingularStringField(value: &_storage._countryName)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 5: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._games)
        case 7: try decoder.decodeSingularEnumField(value: &_storage._gender)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._mugShot)
        case 9: try decoder.decodeSingularStringField(value: &_storage._name)
        case 10: try decoder.decodeRepeatedMessageField(value: &_storage._people)
        case 11: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 12: try decoder.decodeSingularEnumField(value: &_storage._species)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 14: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._akas.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._akas, fieldNumber: 2)
      }
      if !_storage._countryName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._countryName, fieldNumber: 3)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 5)
      }
      if !_storage._games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._games, fieldNumber: 6)
      }
      if _storage._gender != .genderGenderNull {
        try visitor.visitSingularEnumField(value: _storage._gender, fieldNumber: 7)
      }
      if let v = _storage._mugShot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 9)
      }
      if !_storage._people.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._people, fieldNumber: 10)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 11)
      }
      if _storage._species != .characterSpeciesNull {
        try visitor.visitSingularEnumField(value: _storage._species, fieldNumber: 12)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Character, rhs: Proto_Character) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._akas != rhs_storage._akas {return false}
        if _storage._countryName != rhs_storage._countryName {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._games != rhs_storage._games {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._mugShot != rhs_storage._mugShot {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._people != rhs_storage._people {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._species != rhs_storage._species {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CharacterMugShotResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CharacterMugShotResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "charactermugshots"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.charactermugshots)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.charactermugshots.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.charactermugshots, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CharacterMugShotResult, rhs: Proto_CharacterMugShotResult) -> Bool {
    if lhs.charactermugshots != rhs.charactermugshots {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CharacterMugShot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CharacterMugShot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "height"),
    5: .same(proto: "imageId"),
    6: .same(proto: "url"),
    7: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.alphaChannel)
      case 3: try decoder.decodeSingularBoolField(value: &self.animated)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.imageID)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.alphaChannel != false {
      try visitor.visitSingularBoolField(value: self.alphaChannel, fieldNumber: 2)
    }
    if self.animated != false {
      try visitor.visitSingularBoolField(value: self.animated, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CharacterMugShot, rhs: Proto_CharacterMugShot) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.alphaChannel != rhs.alphaChannel {return false}
    if lhs.animated != rhs.animated {return false}
    if lhs.height != rhs.height {return false}
    if lhs.imageID != rhs.imageID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CollectionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CollectionResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "collections"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.collections)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.collections.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.collections, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CollectionResult, rhs: Proto_CollectionResult) -> Bool {
    if lhs.collections != rhs.collections {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Collection: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Collection"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "games"),
    4: .same(proto: "name"),
    5: .same(proto: "slug"),
    6: .same(proto: "updatedAt"),
    7: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _games: [Proto_Game] = []
    var _name: String = String()
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _games = source._games
      _name = source._name
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._games)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 7: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._games, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 5)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Collection, rhs: Proto_Collection) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._games != rhs_storage._games {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CompanyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "companies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.companies)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.companies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.companies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CompanyResult, rhs: Proto_CompanyResult) -> Bool {
    if lhs.companies != rhs.companies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Company: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Company"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "changeDate"),
    3: .same(proto: "changeDateCategory"),
    4: .same(proto: "changedCompanyId"),
    5: .same(proto: "country"),
    6: .same(proto: "createdAt"),
    7: .same(proto: "description"),
    8: .same(proto: "developed"),
    9: .same(proto: "logo"),
    10: .same(proto: "name"),
    11: .same(proto: "parent"),
    12: .same(proto: "published"),
    13: .same(proto: "slug"),
    14: .same(proto: "startDate"),
    15: .same(proto: "startDateCategory"),
    16: .same(proto: "updatedAt"),
    17: .same(proto: "url"),
    18: .same(proto: "websites"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _changeDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _changeDateCategory: Proto_DateFormatStartDateCategoryEnum = .yyyymmmmdd
    var _changedCompanyID: Proto_Company? = nil
    var _country: Int32 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _developed: [Proto_Game] = []
    var _logo: Proto_CompanyLogo? = nil
    var _name: String = String()
    var _parent: Proto_Company? = nil
    var _published: [Proto_Game] = []
    var _slug: String = String()
    var _startDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _startDateCategory: Proto_DateFormatStartDateCategoryEnum = .yyyymmmmdd
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()
    var _websites: [Proto_CompanyWebsite] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _changeDate = source._changeDate
      _changeDateCategory = source._changeDateCategory
      _changedCompanyID = source._changedCompanyID
      _country = source._country
      _createdAt = source._createdAt
      _description_p = source._description_p
      _developed = source._developed
      _logo = source._logo
      _name = source._name
      _parent = source._parent
      _published = source._published
      _slug = source._slug
      _startDate = source._startDate
      _startDateCategory = source._startDateCategory
      _updatedAt = source._updatedAt
      _url = source._url
      _websites = source._websites
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._changeDate)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._changeDateCategory)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._changedCompanyID)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._country)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 7: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 8: try decoder.decodeRepeatedMessageField(value: &_storage._developed)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._logo)
        case 10: try decoder.decodeSingularStringField(value: &_storage._name)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._parent)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._published)
        case 13: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._startDate)
        case 15: try decoder.decodeSingularEnumField(value: &_storage._startDateCategory)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 17: try decoder.decodeSingularStringField(value: &_storage._url)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._websites)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._changeDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._changeDateCategory != .yyyymmmmdd {
        try visitor.visitSingularEnumField(value: _storage._changeDateCategory, fieldNumber: 3)
      }
      if let v = _storage._changedCompanyID {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._country != 0 {
        try visitor.visitSingularInt32Field(value: _storage._country, fieldNumber: 5)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 7)
      }
      if !_storage._developed.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._developed, fieldNumber: 8)
      }
      if let v = _storage._logo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 10)
      }
      if let v = _storage._parent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._published.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._published, fieldNumber: 12)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 13)
      }
      if let v = _storage._startDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if _storage._startDateCategory != .yyyymmmmdd {
        try visitor.visitSingularEnumField(value: _storage._startDateCategory, fieldNumber: 15)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 17)
      }
      if !_storage._websites.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._websites, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Company, rhs: Proto_Company) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._changeDate != rhs_storage._changeDate {return false}
        if _storage._changeDateCategory != rhs_storage._changeDateCategory {return false}
        if _storage._changedCompanyID != rhs_storage._changedCompanyID {return false}
        if _storage._country != rhs_storage._country {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._developed != rhs_storage._developed {return false}
        if _storage._logo != rhs_storage._logo {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._published != rhs_storage._published {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._startDate != rhs_storage._startDate {return false}
        if _storage._startDateCategory != rhs_storage._startDateCategory {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._websites != rhs_storage._websites {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CompanyLogoResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyLogoResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "companylogos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.companylogos)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.companylogos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.companylogos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CompanyLogoResult, rhs: Proto_CompanyLogoResult) -> Bool {
    if lhs.companylogos != rhs.companylogos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CompanyLogo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyLogo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "height"),
    5: .same(proto: "imageId"),
    6: .same(proto: "url"),
    7: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.alphaChannel)
      case 3: try decoder.decodeSingularBoolField(value: &self.animated)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.imageID)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.alphaChannel != false {
      try visitor.visitSingularBoolField(value: self.alphaChannel, fieldNumber: 2)
    }
    if self.animated != false {
      try visitor.visitSingularBoolField(value: self.animated, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CompanyLogo, rhs: Proto_CompanyLogo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.alphaChannel != rhs.alphaChannel {return false}
    if lhs.animated != rhs.animated {return false}
    if lhs.height != rhs.height {return false}
    if lhs.imageID != rhs.imageID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CompanyWebsiteResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyWebsiteResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "companywebsites"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.companywebsites)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.companywebsites.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.companywebsites, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CompanyWebsiteResult, rhs: Proto_CompanyWebsiteResult) -> Bool {
    if lhs.companywebsites != rhs.companywebsites {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CompanyWebsite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CompanyWebsite"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "trusted"),
    4: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.category)
      case 3: try decoder.decodeSingularBoolField(value: &self.trusted)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.category != .websiteCategoryNull {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 2)
    }
    if self.trusted != false {
      try visitor.visitSingularBoolField(value: self.trusted, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CompanyWebsite, rhs: Proto_CompanyWebsite) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.category != rhs.category {return false}
    if lhs.trusted != rhs.trusted {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CoverResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CoverResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "covers"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.covers)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.covers.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.covers, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CoverResult, rhs: Proto_CoverResult) -> Bool {
    if lhs.covers != rhs.covers {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Cover: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Cover"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "game"),
    5: .same(proto: "height"),
    6: .same(proto: "imageId"),
    7: .same(proto: "url"),
    8: .same(proto: "width"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _alphaChannel: Bool = false
    var _animated: Bool = false
    var _game: Proto_Game? = nil
    var _height: Int32 = 0
    var _imageID: String = String()
    var _url: String = String()
    var _width: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _alphaChannel = source._alphaChannel
      _animated = source._animated
      _game = source._game
      _height = source._height
      _imageID = source._imageID
      _url = source._url
      _width = source._width
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._alphaChannel)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._animated)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._height)
        case 6: try decoder.decodeSingularStringField(value: &_storage._imageID)
        case 7: try decoder.decodeSingularStringField(value: &_storage._url)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._width)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._alphaChannel != false {
        try visitor.visitSingularBoolField(value: _storage._alphaChannel, fieldNumber: 2)
      }
      if _storage._animated != false {
        try visitor.visitSingularBoolField(value: _storage._animated, fieldNumber: 3)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt32Field(value: _storage._height, fieldNumber: 5)
      }
      if !_storage._imageID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageID, fieldNumber: 6)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 7)
      }
      if _storage._width != 0 {
        try visitor.visitSingularInt32Field(value: _storage._width, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Cover, rhs: Proto_Cover) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._alphaChannel != rhs_storage._alphaChannel {return false}
        if _storage._animated != rhs_storage._animated {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._imageID != rhs_storage._imageID {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._width != rhs_storage._width {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_CreditResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".CreditResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "credits"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.credits)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.credits.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.credits, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_CreditResult, rhs: Proto_CreditResult) -> Bool {
    if lhs.credits != rhs.credits {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Credit: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Credit"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "character"),
    4: .same(proto: "characterCreditedName"),
    5: .same(proto: "comment"),
    6: .same(proto: "company"),
    7: .same(proto: "country"),
    8: .same(proto: "createdAt"),
    9: .same(proto: "creditedName"),
    10: .same(proto: "game"),
    11: .same(proto: "person"),
    12: .same(proto: "personTitle"),
    13: .same(proto: "position"),
    14: .same(proto: "updatedAt"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _category: Proto_CreditCategoryEnum = .creditCategoryNull
    var _character: Proto_Character? = nil
    var _characterCreditedName: String = String()
    var _comment: String = String()
    var _company: Proto_Company? = nil
    var _country: Int32 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _creditedName: String = String()
    var _game: Proto_Game? = nil
    var _person: Proto_Person? = nil
    var _personTitle: Proto_Title? = nil
    var _position: Int32 = 0
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _category = source._category
      _character = source._character
      _characterCreditedName = source._characterCreditedName
      _comment = source._comment
      _company = source._company
      _country = source._country
      _createdAt = source._createdAt
      _creditedName = source._creditedName
      _game = source._game
      _person = source._person
      _personTitle = source._personTitle
      _position = source._position
      _updatedAt = source._updatedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._character)
        case 4: try decoder.decodeSingularStringField(value: &_storage._characterCreditedName)
        case 5: try decoder.decodeSingularStringField(value: &_storage._comment)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._company)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._country)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 9: try decoder.decodeSingularStringField(value: &_storage._creditedName)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._person)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._personTitle)
        case 13: try decoder.decodeSingularInt32Field(value: &_storage._position)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._category != .creditCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 2)
      }
      if let v = _storage._character {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._characterCreditedName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._characterCreditedName, fieldNumber: 4)
      }
      if !_storage._comment.isEmpty {
        try visitor.visitSingularStringField(value: _storage._comment, fieldNumber: 5)
      }
      if let v = _storage._company {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._country != 0 {
        try visitor.visitSingularInt32Field(value: _storage._country, fieldNumber: 7)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._creditedName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._creditedName, fieldNumber: 9)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._person {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if let v = _storage._personTitle {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._position != 0 {
        try visitor.visitSingularInt32Field(value: _storage._position, fieldNumber: 13)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Credit, rhs: Proto_Credit) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._character != rhs_storage._character {return false}
        if _storage._characterCreditedName != rhs_storage._characterCreditedName {return false}
        if _storage._comment != rhs_storage._comment {return false}
        if _storage._company != rhs_storage._company {return false}
        if _storage._country != rhs_storage._country {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._creditedName != rhs_storage._creditedName {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._person != rhs_storage._person {return false}
        if _storage._personTitle != rhs_storage._personTitle {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ExternalGameResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExternalGameResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "externalgames"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.externalgames)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.externalgames.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.externalgames, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ExternalGameResult, rhs: Proto_ExternalGameResult) -> Bool {
    if lhs.externalgames != rhs.externalgames {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ExternalGame: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ExternalGame"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "game"),
    5: .same(proto: "name"),
    6: .same(proto: "uid"),
    7: .same(proto: "updatedAt"),
    8: .same(proto: "url"),
    9: .same(proto: "year"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _category: Proto_ExternalGameCategoryEnum = .externalgameCategoryNull
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _game: Proto_Game? = nil
    var _name: String = String()
    var _uid: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()
    var _year: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _category = source._category
      _createdAt = source._createdAt
      _game = source._game
      _name = source._name
      _uid = source._uid
      _updatedAt = source._updatedAt
      _url = source._url
      _year = source._year
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 5: try decoder.decodeSingularStringField(value: &_storage._name)
        case 6: try decoder.decodeSingularStringField(value: &_storage._uid)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 8: try decoder.decodeSingularStringField(value: &_storage._url)
        case 9: try decoder.decodeSingularInt32Field(value: &_storage._year)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._category != .externalgameCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 2)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 5)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 6)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 8)
      }
      if _storage._year != 0 {
        try visitor.visitSingularInt32Field(value: _storage._year, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ExternalGame, rhs: Proto_ExternalGame) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._year != rhs_storage._year {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_FeedResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeedResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feeds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.feeds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feeds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feeds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_FeedResult, rhs: Proto_FeedResult) -> Bool {
    if lhs.feeds != rhs.feeds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Feed: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Feed"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "content"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "feedLikesCount"),
    6: .same(proto: "feedVideo"),
    7: .same(proto: "games"),
    8: .same(proto: "meta"),
    9: .same(proto: "publishedAt"),
    10: .same(proto: "pulse"),
    11: .same(proto: "slug"),
    12: .same(proto: "title"),
    13: .same(proto: "uid"),
    14: .same(proto: "updatedAt"),
    15: .same(proto: "url"),
    16: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _category: Proto_FeedCategoryEnum = .feedCategoryNull
    var _content: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _feedLikesCount: Int32 = 0
    var _feedVideo: Proto_GameVideo? = nil
    var _games: [Proto_Game] = []
    var _meta: String = String()
    var _publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _pulse: Proto_Pulse? = nil
    var _slug: String = String()
    var _title: String = String()
    var _uid: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()
    var _user: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _category = source._category
      _content = source._content
      _createdAt = source._createdAt
      _feedLikesCount = source._feedLikesCount
      _feedVideo = source._feedVideo
      _games = source._games
      _meta = source._meta
      _publishedAt = source._publishedAt
      _pulse = source._pulse
      _slug = source._slug
      _title = source._title
      _uid = source._uid
      _updatedAt = source._updatedAt
      _url = source._url
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 3: try decoder.decodeSingularStringField(value: &_storage._content)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._feedLikesCount)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._feedVideo)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._games)
        case 8: try decoder.decodeSingularStringField(value: &_storage._meta)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._publishedAt)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._pulse)
        case 11: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 12: try decoder.decodeSingularStringField(value: &_storage._title)
        case 13: try decoder.decodeSingularStringField(value: &_storage._uid)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 15: try decoder.decodeSingularStringField(value: &_storage._url)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._category != .feedCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 2)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 3)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._feedLikesCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._feedLikesCount, fieldNumber: 5)
      }
      if let v = _storage._feedVideo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._games, fieldNumber: 7)
      }
      if !_storage._meta.isEmpty {
        try visitor.visitSingularStringField(value: _storage._meta, fieldNumber: 8)
      }
      if let v = _storage._publishedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._pulse {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 11)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 12)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 13)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 15)
      }
      if _storage._user != 0 {
        try visitor.visitSingularInt32Field(value: _storage._user, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Feed, rhs: Proto_Feed) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._feedLikesCount != rhs_storage._feedLikesCount {return false}
        if _storage._feedVideo != rhs_storage._feedVideo {return false}
        if _storage._games != rhs_storage._games {return false}
        if _storage._meta != rhs_storage._meta {return false}
        if _storage._publishedAt != rhs_storage._publishedAt {return false}
        if _storage._pulse != rhs_storage._pulse {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_FeedFollowResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeedFollowResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "feedfollows"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.feedfollows)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.feedfollows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.feedfollows, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_FeedFollowResult, rhs: Proto_FeedFollowResult) -> Bool {
    if lhs.feedfollows != rhs.feedfollows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_FeedFollow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FeedFollow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "feed"),
    4: .same(proto: "publishedAt"),
    5: .same(proto: "updatedAt"),
    6: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _feed: Proto_FeedCategoryEnum = .feedCategoryNull
    var _publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _user: Proto_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _feed = source._feed
      _publishedAt = source._publishedAt
      _updatedAt = source._updatedAt
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._feed)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._publishedAt)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._feed != .feedCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._feed, fieldNumber: 3)
      }
      if let v = _storage._publishedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_FeedFollow, rhs: Proto_FeedFollow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._feed != rhs_storage._feed {return false}
        if _storage._publishedAt != rhs_storage._publishedAt {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_FollowResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FollowResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "follows"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.follows)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.follows.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.follows, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_FollowResult, rhs: Proto_FollowResult) -> Bool {
    if lhs.follows != rhs.follows {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Follow: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Follow"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "game"),
    3: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _game: Proto_Game? = nil
    var _user: Proto_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _game = source._game
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Follow, rhs: Proto_Follow) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_FranchiseResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".FranchiseResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "franchises"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.franchises)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.franchises.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.franchises, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_FranchiseResult, rhs: Proto_FranchiseResult) -> Bool {
    if lhs.franchises != rhs.franchises {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Franchise: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Franchise"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "games"),
    4: .same(proto: "name"),
    5: .same(proto: "slug"),
    6: .same(proto: "updatedAt"),
    7: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _games: [Proto_Game] = []
    var _name: String = String()
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _games = source._games
      _name = source._name
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._games)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 7: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._games, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 5)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Franchise, rhs: Proto_Franchise) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._games != rhs_storage._games {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "games"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.games)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.games.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.games, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameResult, rhs: Proto_GameResult) -> Bool {
    if lhs.games != rhs.games {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Game: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Game"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "ageRatings"),
    3: .same(proto: "aggregatedRating"),
    4: .same(proto: "aggregatedRatingCount"),
    5: .same(proto: "alternativeNames"),
    6: .same(proto: "artworks"),
    7: .same(proto: "bundles"),
    8: .same(proto: "category"),
    9: .same(proto: "collection"),
    10: .same(proto: "cover"),
    11: .same(proto: "createdAt"),
    12: .same(proto: "dlcs"),
    13: .same(proto: "expansions"),
    14: .same(proto: "externalGames"),
    15: .same(proto: "firstReleaseDate"),
    16: .same(proto: "follows"),
    17: .same(proto: "franchise"),
    18: .same(proto: "franchises"),
    19: .same(proto: "gameEngines"),
    20: .same(proto: "gameModes"),
    21: .same(proto: "genres"),
    22: .same(proto: "hypes"),
    23: .same(proto: "involvedCompanies"),
    24: .same(proto: "keywords"),
    25: .same(proto: "multiplayerModes"),
    26: .same(proto: "name"),
    27: .same(proto: "parentGame"),
    28: .same(proto: "platforms"),
    29: .same(proto: "playerPerspectives"),
    30: .same(proto: "popularity"),
    31: .same(proto: "pulseCount"),
    32: .same(proto: "rating"),
    33: .same(proto: "ratingCount"),
    34: .same(proto: "releaseDates"),
    35: .same(proto: "screenshots"),
    36: .same(proto: "similarGames"),
    37: .same(proto: "slug"),
    38: .same(proto: "standaloneExpansions"),
    39: .same(proto: "status"),
    40: .same(proto: "storyline"),
    41: .same(proto: "summary"),
    42: .same(proto: "tags"),
    43: .same(proto: "themes"),
    44: .same(proto: "timeToBeat"),
    45: .same(proto: "totalRating"),
    46: .same(proto: "totalRatingCount"),
    47: .same(proto: "updatedAt"),
    48: .same(proto: "url"),
    49: .same(proto: "versionParent"),
    50: .same(proto: "versionTitle"),
    51: .same(proto: "videos"),
    52: .same(proto: "websites"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _ageRatings: [Proto_AgeRating] = []
    var _aggregatedRating: Double = 0
    var _aggregatedRatingCount: Int32 = 0
    var _alternativeNames: [Proto_AlternativeName] = []
    var _artworks: [Proto_Artwork] = []
    var _bundles: [Proto_Game] = []
    var _category: Proto_GameCategoryEnum = .mainGame
    var _collection: Proto_Collection? = nil
    var _cover: Proto_Cover? = nil
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _dlcs: [Proto_Game] = []
    var _expansions: [Proto_Game] = []
    var _externalGames: [Proto_ExternalGame] = []
    var _firstReleaseDate: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _follows: Int32 = 0
    var _franchise: Proto_Franchise? = nil
    var _franchises: [Proto_Franchise] = []
    var _gameEngines: [Proto_GameEngine] = []
    var _gameModes: [Proto_GameMode] = []
    var _genres: [Proto_Genre] = []
    var _hypes: Int32 = 0
    var _involvedCompanies: [Proto_InvolvedCompany] = []
    var _keywords: [Proto_Keyword] = []
    var _multiplayerModes: [Proto_MultiplayerMode] = []
    var _name: String = String()
    var _parentGame: Proto_Game? = nil
    var _platforms: [Proto_Platform] = []
    var _playerPerspectives: [Proto_PlayerPerspective] = []
    var _popularity: Double = 0
    var _pulseCount: Int32 = 0
    var _rating: Double = 0
    var _ratingCount: Int32 = 0
    var _releaseDates: [Proto_ReleaseDate] = []
    var _screenshots: [Proto_Screenshot] = []
    var _similarGames: [Proto_Game] = []
    var _slug: String = String()
    var _standaloneExpansions: [Proto_Game] = []
    var _status: Proto_GameStatusEnum = .released
    var _storyline: String = String()
    var _summary: String = String()
    var _tags: [Int32] = []
    var _themes: [Proto_Theme] = []
    var _timeToBeat: Proto_TimeToBeat? = nil
    var _totalRating: Double = 0
    var _totalRatingCount: Int32 = 0
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()
    var _versionParent: Proto_Game? = nil
    var _versionTitle: String = String()
    var _videos: [Proto_GameVideo] = []
    var _websites: [Proto_Website] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _ageRatings = source._ageRatings
      _aggregatedRating = source._aggregatedRating
      _aggregatedRatingCount = source._aggregatedRatingCount
      _alternativeNames = source._alternativeNames
      _artworks = source._artworks
      _bundles = source._bundles
      _category = source._category
      _collection = source._collection
      _cover = source._cover
      _createdAt = source._createdAt
      _dlcs = source._dlcs
      _expansions = source._expansions
      _externalGames = source._externalGames
      _firstReleaseDate = source._firstReleaseDate
      _follows = source._follows
      _franchise = source._franchise
      _franchises = source._franchises
      _gameEngines = source._gameEngines
      _gameModes = source._gameModes
      _genres = source._genres
      _hypes = source._hypes
      _involvedCompanies = source._involvedCompanies
      _keywords = source._keywords
      _multiplayerModes = source._multiplayerModes
      _name = source._name
      _parentGame = source._parentGame
      _platforms = source._platforms
      _playerPerspectives = source._playerPerspectives
      _popularity = source._popularity
      _pulseCount = source._pulseCount
      _rating = source._rating
      _ratingCount = source._ratingCount
      _releaseDates = source._releaseDates
      _screenshots = source._screenshots
      _similarGames = source._similarGames
      _slug = source._slug
      _standaloneExpansions = source._standaloneExpansions
      _status = source._status
      _storyline = source._storyline
      _summary = source._summary
      _tags = source._tags
      _themes = source._themes
      _timeToBeat = source._timeToBeat
      _totalRating = source._totalRating
      _totalRatingCount = source._totalRatingCount
      _updatedAt = source._updatedAt
      _url = source._url
      _versionParent = source._versionParent
      _versionTitle = source._versionTitle
      _videos = source._videos
      _websites = source._websites
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._ageRatings)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._aggregatedRating)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._aggregatedRatingCount)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._alternativeNames)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._artworks)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._bundles)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._collection)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._cover)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 12: try decoder.decodeRepeatedMessageField(value: &_storage._dlcs)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._expansions)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._externalGames)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._firstReleaseDate)
        case 16: try decoder.decodeSingularInt32Field(value: &_storage._follows)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._franchise)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._franchises)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._gameEngines)
        case 20: try decoder.decodeRepeatedMessageField(value: &_storage._gameModes)
        case 21: try decoder.decodeRepeatedMessageField(value: &_storage._genres)
        case 22: try decoder.decodeSingularInt32Field(value: &_storage._hypes)
        case 23: try decoder.decodeRepeatedMessageField(value: &_storage._involvedCompanies)
        case 24: try decoder.decodeRepeatedMessageField(value: &_storage._keywords)
        case 25: try decoder.decodeRepeatedMessageField(value: &_storage._multiplayerModes)
        case 26: try decoder.decodeSingularStringField(value: &_storage._name)
        case 27: try decoder.decodeSingularMessageField(value: &_storage._parentGame)
        case 28: try decoder.decodeRepeatedMessageField(value: &_storage._platforms)
        case 29: try decoder.decodeRepeatedMessageField(value: &_storage._playerPerspectives)
        case 30: try decoder.decodeSingularDoubleField(value: &_storage._popularity)
        case 31: try decoder.decodeSingularInt32Field(value: &_storage._pulseCount)
        case 32: try decoder.decodeSingularDoubleField(value: &_storage._rating)
        case 33: try decoder.decodeSingularInt32Field(value: &_storage._ratingCount)
        case 34: try decoder.decodeRepeatedMessageField(value: &_storage._releaseDates)
        case 35: try decoder.decodeRepeatedMessageField(value: &_storage._screenshots)
        case 36: try decoder.decodeRepeatedMessageField(value: &_storage._similarGames)
        case 37: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 38: try decoder.decodeRepeatedMessageField(value: &_storage._standaloneExpansions)
        case 39: try decoder.decodeSingularEnumField(value: &_storage._status)
        case 40: try decoder.decodeSingularStringField(value: &_storage._storyline)
        case 41: try decoder.decodeSingularStringField(value: &_storage._summary)
        case 42: try decoder.decodeRepeatedInt32Field(value: &_storage._tags)
        case 43: try decoder.decodeRepeatedMessageField(value: &_storage._themes)
        case 44: try decoder.decodeSingularMessageField(value: &_storage._timeToBeat)
        case 45: try decoder.decodeSingularDoubleField(value: &_storage._totalRating)
        case 46: try decoder.decodeSingularInt32Field(value: &_storage._totalRatingCount)
        case 47: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 48: try decoder.decodeSingularStringField(value: &_storage._url)
        case 49: try decoder.decodeSingularMessageField(value: &_storage._versionParent)
        case 50: try decoder.decodeSingularStringField(value: &_storage._versionTitle)
        case 51: try decoder.decodeRepeatedMessageField(value: &_storage._videos)
        case 52: try decoder.decodeRepeatedMessageField(value: &_storage._websites)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._ageRatings.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._ageRatings, fieldNumber: 2)
      }
      if _storage._aggregatedRating != 0 {
        try visitor.visitSingularDoubleField(value: _storage._aggregatedRating, fieldNumber: 3)
      }
      if _storage._aggregatedRatingCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._aggregatedRatingCount, fieldNumber: 4)
      }
      if !_storage._alternativeNames.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._alternativeNames, fieldNumber: 5)
      }
      if !_storage._artworks.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._artworks, fieldNumber: 6)
      }
      if !_storage._bundles.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._bundles, fieldNumber: 7)
      }
      if _storage._category != .mainGame {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 8)
      }
      if let v = _storage._collection {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._cover {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._dlcs.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._dlcs, fieldNumber: 12)
      }
      if !_storage._expansions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._expansions, fieldNumber: 13)
      }
      if !_storage._externalGames.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._externalGames, fieldNumber: 14)
      }
      if let v = _storage._firstReleaseDate {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if _storage._follows != 0 {
        try visitor.visitSingularInt32Field(value: _storage._follows, fieldNumber: 16)
      }
      if let v = _storage._franchise {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if !_storage._franchises.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._franchises, fieldNumber: 18)
      }
      if !_storage._gameEngines.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameEngines, fieldNumber: 19)
      }
      if !_storage._gameModes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._gameModes, fieldNumber: 20)
      }
      if !_storage._genres.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._genres, fieldNumber: 21)
      }
      if _storage._hypes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hypes, fieldNumber: 22)
      }
      if !_storage._involvedCompanies.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._involvedCompanies, fieldNumber: 23)
      }
      if !_storage._keywords.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._keywords, fieldNumber: 24)
      }
      if !_storage._multiplayerModes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._multiplayerModes, fieldNumber: 25)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 26)
      }
      if let v = _storage._parentGame {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 27)
      }
      if !_storage._platforms.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._platforms, fieldNumber: 28)
      }
      if !_storage._playerPerspectives.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._playerPerspectives, fieldNumber: 29)
      }
      if _storage._popularity != 0 {
        try visitor.visitSingularDoubleField(value: _storage._popularity, fieldNumber: 30)
      }
      if _storage._pulseCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pulseCount, fieldNumber: 31)
      }
      if _storage._rating != 0 {
        try visitor.visitSingularDoubleField(value: _storage._rating, fieldNumber: 32)
      }
      if _storage._ratingCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._ratingCount, fieldNumber: 33)
      }
      if !_storage._releaseDates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._releaseDates, fieldNumber: 34)
      }
      if !_storage._screenshots.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._screenshots, fieldNumber: 35)
      }
      if !_storage._similarGames.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._similarGames, fieldNumber: 36)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 37)
      }
      if !_storage._standaloneExpansions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._standaloneExpansions, fieldNumber: 38)
      }
      if _storage._status != .released {
        try visitor.visitSingularEnumField(value: _storage._status, fieldNumber: 39)
      }
      if !_storage._storyline.isEmpty {
        try visitor.visitSingularStringField(value: _storage._storyline, fieldNumber: 40)
      }
      if !_storage._summary.isEmpty {
        try visitor.visitSingularStringField(value: _storage._summary, fieldNumber: 41)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._tags, fieldNumber: 42)
      }
      if !_storage._themes.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._themes, fieldNumber: 43)
      }
      if let v = _storage._timeToBeat {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 44)
      }
      if _storage._totalRating != 0 {
        try visitor.visitSingularDoubleField(value: _storage._totalRating, fieldNumber: 45)
      }
      if _storage._totalRatingCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._totalRatingCount, fieldNumber: 46)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 47)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 48)
      }
      if let v = _storage._versionParent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 49)
      }
      if !_storage._versionTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._versionTitle, fieldNumber: 50)
      }
      if !_storage._videos.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._videos, fieldNumber: 51)
      }
      if !_storage._websites.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._websites, fieldNumber: 52)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Game, rhs: Proto_Game) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._ageRatings != rhs_storage._ageRatings {return false}
        if _storage._aggregatedRating != rhs_storage._aggregatedRating {return false}
        if _storage._aggregatedRatingCount != rhs_storage._aggregatedRatingCount {return false}
        if _storage._alternativeNames != rhs_storage._alternativeNames {return false}
        if _storage._artworks != rhs_storage._artworks {return false}
        if _storage._bundles != rhs_storage._bundles {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._collection != rhs_storage._collection {return false}
        if _storage._cover != rhs_storage._cover {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._dlcs != rhs_storage._dlcs {return false}
        if _storage._expansions != rhs_storage._expansions {return false}
        if _storage._externalGames != rhs_storage._externalGames {return false}
        if _storage._firstReleaseDate != rhs_storage._firstReleaseDate {return false}
        if _storage._follows != rhs_storage._follows {return false}
        if _storage._franchise != rhs_storage._franchise {return false}
        if _storage._franchises != rhs_storage._franchises {return false}
        if _storage._gameEngines != rhs_storage._gameEngines {return false}
        if _storage._gameModes != rhs_storage._gameModes {return false}
        if _storage._genres != rhs_storage._genres {return false}
        if _storage._hypes != rhs_storage._hypes {return false}
        if _storage._involvedCompanies != rhs_storage._involvedCompanies {return false}
        if _storage._keywords != rhs_storage._keywords {return false}
        if _storage._multiplayerModes != rhs_storage._multiplayerModes {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._parentGame != rhs_storage._parentGame {return false}
        if _storage._platforms != rhs_storage._platforms {return false}
        if _storage._playerPerspectives != rhs_storage._playerPerspectives {return false}
        if _storage._popularity != rhs_storage._popularity {return false}
        if _storage._pulseCount != rhs_storage._pulseCount {return false}
        if _storage._rating != rhs_storage._rating {return false}
        if _storage._ratingCount != rhs_storage._ratingCount {return false}
        if _storage._releaseDates != rhs_storage._releaseDates {return false}
        if _storage._screenshots != rhs_storage._screenshots {return false}
        if _storage._similarGames != rhs_storage._similarGames {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._standaloneExpansions != rhs_storage._standaloneExpansions {return false}
        if _storage._status != rhs_storage._status {return false}
        if _storage._storyline != rhs_storage._storyline {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._themes != rhs_storage._themes {return false}
        if _storage._timeToBeat != rhs_storage._timeToBeat {return false}
        if _storage._totalRating != rhs_storage._totalRating {return false}
        if _storage._totalRatingCount != rhs_storage._totalRatingCount {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._versionParent != rhs_storage._versionParent {return false}
        if _storage._versionTitle != rhs_storage._versionTitle {return false}
        if _storage._videos != rhs_storage._videos {return false}
        if _storage._websites != rhs_storage._websites {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameEngineResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameEngineResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gameengines"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.gameengines)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameengines.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameengines, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameEngineResult, rhs: Proto_GameEngineResult) -> Bool {
    if lhs.gameengines != rhs.gameengines {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameEngine: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameEngine"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "companies"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "description"),
    5: .same(proto: "logo"),
    6: .same(proto: "name"),
    7: .same(proto: "platforms"),
    8: .same(proto: "slug"),
    9: .same(proto: "updatedAt"),
    10: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _companies: [Proto_Company] = []
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _logo: Proto_GameEngineLogo? = nil
    var _name: String = String()
    var _platforms: [Proto_Platform] = []
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _companies = source._companies
      _createdAt = source._createdAt
      _description_p = source._description_p
      _logo = source._logo
      _name = source._name
      _platforms = source._platforms
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._companies)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 4: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._logo)
        case 6: try decoder.decodeSingularStringField(value: &_storage._name)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._platforms)
        case 8: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 10: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._companies.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._companies, fieldNumber: 2)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 4)
      }
      if let v = _storage._logo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 6)
      }
      if !_storage._platforms.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._platforms, fieldNumber: 7)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 8)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameEngine, rhs: Proto_GameEngine) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._companies != rhs_storage._companies {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._logo != rhs_storage._logo {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._platforms != rhs_storage._platforms {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameEngineLogoResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameEngineLogoResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gameenginelogos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.gameenginelogos)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameenginelogos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameenginelogos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameEngineLogoResult, rhs: Proto_GameEngineLogoResult) -> Bool {
    if lhs.gameenginelogos != rhs.gameenginelogos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameEngineLogo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameEngineLogo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "height"),
    5: .same(proto: "imageId"),
    6: .same(proto: "url"),
    7: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.alphaChannel)
      case 3: try decoder.decodeSingularBoolField(value: &self.animated)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.imageID)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.alphaChannel != false {
      try visitor.visitSingularBoolField(value: self.alphaChannel, fieldNumber: 2)
    }
    if self.animated != false {
      try visitor.visitSingularBoolField(value: self.animated, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameEngineLogo, rhs: Proto_GameEngineLogo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.alphaChannel != rhs.alphaChannel {return false}
    if lhs.animated != rhs.animated {return false}
    if lhs.height != rhs.height {return false}
    if lhs.imageID != rhs.imageID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameModeResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameModeResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gamemodes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.gamemodes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gamemodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gamemodes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameModeResult, rhs: Proto_GameModeResult) -> Bool {
    if lhs.gamemodes != rhs.gamemodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameMode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameMode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "name"),
    4: .same(proto: "slug"),
    5: .same(proto: "updatedAt"),
    6: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _name: String = String()
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _name = source._name
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 6: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 4)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameMode, rhs: Proto_GameMode) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameVersionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameVersionResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gameversions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.gameversions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameversions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameversions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameVersionResult, rhs: Proto_GameVersionResult) -> Bool {
    if lhs.gameversions != rhs.gameversions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "features"),
    4: .same(proto: "game"),
    5: .same(proto: "games"),
    6: .same(proto: "updatedAt"),
    7: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _features: [Proto_GameVersionFeature] = []
    var _game: Proto_Game? = nil
    var _games: [Proto_Game] = []
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _features = source._features
      _game = source._game
      _games = source._games
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._features)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._games)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 7: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._features.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._features, fieldNumber: 3)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._games, fieldNumber: 5)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 7)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameVersion, rhs: Proto_GameVersion) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._features != rhs_storage._features {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._games != rhs_storage._games {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameVersionFeatureResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameVersionFeatureResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gameversionfeatures"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.gameversionfeatures)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameversionfeatures.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameversionfeatures, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameVersionFeatureResult, rhs: Proto_GameVersionFeatureResult) -> Bool {
    if lhs.gameversionfeatures != rhs.gameversionfeatures {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameVersionFeature: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameVersionFeature"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "description"),
    4: .same(proto: "position"),
    5: .same(proto: "title"),
    6: .same(proto: "values"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.category)
      case 3: try decoder.decodeSingularStringField(value: &self.description_p)
      case 4: try decoder.decodeSingularInt32Field(value: &self.position)
      case 5: try decoder.decodeSingularStringField(value: &self.title)
      case 6: try decoder.decodeRepeatedMessageField(value: &self.values)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.category != .boolean {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 2)
    }
    if !self.description_p.isEmpty {
      try visitor.visitSingularStringField(value: self.description_p, fieldNumber: 3)
    }
    if self.position != 0 {
      try visitor.visitSingularInt32Field(value: self.position, fieldNumber: 4)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 5)
    }
    if !self.values.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.values, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameVersionFeature, rhs: Proto_GameVersionFeature) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.category != rhs.category {return false}
    if lhs.description_p != rhs.description_p {return false}
    if lhs.position != rhs.position {return false}
    if lhs.title != rhs.title {return false}
    if lhs.values != rhs.values {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameVersionFeatureValueResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameVersionFeatureValueResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gameversionfeaturevalues"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.gameversionfeaturevalues)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gameversionfeaturevalues.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gameversionfeaturevalues, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameVersionFeatureValueResult, rhs: Proto_GameVersionFeatureValueResult) -> Bool {
    if lhs.gameversionfeaturevalues != rhs.gameversionfeaturevalues {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameVersionFeatureValue: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameVersionFeatureValue"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "game"),
    3: .same(proto: "gameFeature"),
    4: .same(proto: "includedFeature"),
    5: .same(proto: "note"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _game: Proto_Game? = nil
    var _gameFeature: Proto_GameVersionFeature? = nil
    var _includedFeature: Proto_GameVersionFeatureValueIncludedFeatureEnum = .notIncluded
    var _note: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _game = source._game
      _gameFeature = source._gameFeature
      _includedFeature = source._includedFeature
      _note = source._note
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._gameFeature)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._includedFeature)
        case 5: try decoder.decodeSingularStringField(value: &_storage._note)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._gameFeature {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._includedFeature != .notIncluded {
        try visitor.visitSingularEnumField(value: _storage._includedFeature, fieldNumber: 4)
      }
      if !_storage._note.isEmpty {
        try visitor.visitSingularStringField(value: _storage._note, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameVersionFeatureValue, rhs: Proto_GameVersionFeatureValue) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._gameFeature != rhs_storage._gameFeature {return false}
        if _storage._includedFeature != rhs_storage._includedFeature {return false}
        if _storage._note != rhs_storage._note {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameVideoResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameVideoResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "gamevideos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.gamevideos)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.gamevideos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.gamevideos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameVideoResult, rhs: Proto_GameVideoResult) -> Bool {
    if lhs.gamevideos != rhs.gamevideos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GameVideo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GameVideo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "game"),
    3: .same(proto: "name"),
    4: .same(proto: "videoId"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _game: Proto_Game? = nil
    var _name: String = String()
    var _videoID: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _game = source._game
      _name = source._name
      _videoID = source._videoID
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._videoID)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._videoID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._videoID, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GameVideo, rhs: Proto_GameVideo) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._videoID != rhs_storage._videoID {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_GenreResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".GenreResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "genres"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.genres)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.genres.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.genres, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_GenreResult, rhs: Proto_GenreResult) -> Bool {
    if lhs.genres != rhs.genres {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Genre: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Genre"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "name"),
    4: .same(proto: "slug"),
    5: .same(proto: "updatedAt"),
    6: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _name: String = String()
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _name = source._name
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 6: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 4)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Genre, rhs: Proto_Genre) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_InvolvedCompanyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvolvedCompanyResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "involvedcompanies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.involvedcompanies)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.involvedcompanies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.involvedcompanies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_InvolvedCompanyResult, rhs: Proto_InvolvedCompanyResult) -> Bool {
    if lhs.involvedcompanies != rhs.involvedcompanies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_InvolvedCompany: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".InvolvedCompany"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "company"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "developer"),
    5: .same(proto: "game"),
    6: .same(proto: "porting"),
    7: .same(proto: "publisher"),
    8: .same(proto: "supporting"),
    9: .same(proto: "updatedAt"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _company: Proto_Company? = nil
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _developer: Bool = false
    var _game: Proto_Game? = nil
    var _porting: Bool = false
    var _publisher: Bool = false
    var _supporting: Bool = false
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _company = source._company
      _createdAt = source._createdAt
      _developer = source._developer
      _game = source._game
      _porting = source._porting
      _publisher = source._publisher
      _supporting = source._supporting
      _updatedAt = source._updatedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._company)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._developer)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._porting)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._publisher)
        case 8: try decoder.decodeSingularBoolField(value: &_storage._supporting)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._company {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._developer != false {
        try visitor.visitSingularBoolField(value: _storage._developer, fieldNumber: 4)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._porting != false {
        try visitor.visitSingularBoolField(value: _storage._porting, fieldNumber: 6)
      }
      if _storage._publisher != false {
        try visitor.visitSingularBoolField(value: _storage._publisher, fieldNumber: 7)
      }
      if _storage._supporting != false {
        try visitor.visitSingularBoolField(value: _storage._supporting, fieldNumber: 8)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_InvolvedCompany, rhs: Proto_InvolvedCompany) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._company != rhs_storage._company {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._developer != rhs_storage._developer {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._porting != rhs_storage._porting {return false}
        if _storage._publisher != rhs_storage._publisher {return false}
        if _storage._supporting != rhs_storage._supporting {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_KeywordResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".KeywordResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "keywords"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.keywords)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.keywords.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.keywords, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_KeywordResult, rhs: Proto_KeywordResult) -> Bool {
    if lhs.keywords != rhs.keywords {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Keyword: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Keyword"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "name"),
    4: .same(proto: "slug"),
    5: .same(proto: "updatedAt"),
    6: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _name: String = String()
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _name = source._name
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 6: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 4)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Keyword, rhs: Proto_Keyword) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ListResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "lists"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.lists)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.lists.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.lists, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ListResult, rhs: Proto_ListResult) -> Bool {
    if lhs.lists != rhs.lists {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_List: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".List"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "description"),
    4: .same(proto: "entriesCount"),
    5: .same(proto: "listEntries"),
    6: .same(proto: "listTags"),
    7: .same(proto: "listedGames"),
    8: .same(proto: "name"),
    9: .same(proto: "numbering"),
    10: .same(proto: "private"),
    11: .same(proto: "similarLists"),
    12: .same(proto: "slug"),
    13: .same(proto: "updatedAt"),
    14: .same(proto: "url"),
    15: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _entriesCount: Int32 = 0
    var _listEntries: [Proto_ListEntry] = []
    var _listTags: [Int32] = []
    var _listedGames: [Proto_Game] = []
    var _name: String = String()
    var _numbering: Bool = false
    var _private: Bool = false
    var _similarLists: [Proto_List] = []
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()
    var _user: Proto_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _description_p = source._description_p
      _entriesCount = source._entriesCount
      _listEntries = source._listEntries
      _listTags = source._listTags
      _listedGames = source._listedGames
      _name = source._name
      _numbering = source._numbering
      _private = source._private
      _similarLists = source._similarLists
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._entriesCount)
        case 5: try decoder.decodeRepeatedMessageField(value: &_storage._listEntries)
        case 6: try decoder.decodeRepeatedInt32Field(value: &_storage._listTags)
        case 7: try decoder.decodeRepeatedMessageField(value: &_storage._listedGames)
        case 8: try decoder.decodeSingularStringField(value: &_storage._name)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._numbering)
        case 10: try decoder.decodeSingularBoolField(value: &_storage._private)
        case 11: try decoder.decodeRepeatedMessageField(value: &_storage._similarLists)
        case 12: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 14: try decoder.decodeSingularStringField(value: &_storage._url)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if _storage._entriesCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._entriesCount, fieldNumber: 4)
      }
      if !_storage._listEntries.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._listEntries, fieldNumber: 5)
      }
      if !_storage._listTags.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._listTags, fieldNumber: 6)
      }
      if !_storage._listedGames.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._listedGames, fieldNumber: 7)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 8)
      }
      if _storage._numbering != false {
        try visitor.visitSingularBoolField(value: _storage._numbering, fieldNumber: 9)
      }
      if _storage._private != false {
        try visitor.visitSingularBoolField(value: _storage._private, fieldNumber: 10)
      }
      if !_storage._similarLists.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._similarLists, fieldNumber: 11)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 12)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 14)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_List, rhs: Proto_List) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._entriesCount != rhs_storage._entriesCount {return false}
        if _storage._listEntries != rhs_storage._listEntries {return false}
        if _storage._listTags != rhs_storage._listTags {return false}
        if _storage._listedGames != rhs_storage._listedGames {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._numbering != rhs_storage._numbering {return false}
        if _storage._private != rhs_storage._private {return false}
        if _storage._similarLists != rhs_storage._similarLists {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ListEntryResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListEntryResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "listentries"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.listentries)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.listentries.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.listentries, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ListEntryResult, rhs: Proto_ListEntryResult) -> Bool {
    if lhs.listentries != rhs.listentries {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ListEntry: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ListEntry"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "description"),
    3: .same(proto: "game"),
    4: .same(proto: "list"),
    5: .same(proto: "platform"),
    6: .same(proto: "position"),
    7: .same(proto: "private"),
    8: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _description_p: String = String()
    var _game: Proto_Game? = nil
    var _list: Proto_List? = nil
    var _platform: Proto_Platform? = nil
    var _position: Int32 = 0
    var _private: Bool = false
    var _user: Proto_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _description_p = source._description_p
      _game = source._game
      _list = source._list
      _platform = source._platform
      _position = source._position
      _private = source._private
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._list)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._platform)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._position)
        case 7: try decoder.decodeSingularBoolField(value: &_storage._private)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 2)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._list {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._platform {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._position != 0 {
        try visitor.visitSingularInt32Field(value: _storage._position, fieldNumber: 6)
      }
      if _storage._private != false {
        try visitor.visitSingularBoolField(value: _storage._private, fieldNumber: 7)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ListEntry, rhs: Proto_ListEntry) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._list != rhs_storage._list {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._position != rhs_storage._position {return false}
        if _storage._private != rhs_storage._private {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_MultiplayerModeResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiplayerModeResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "multiplayermodes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.multiplayermodes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.multiplayermodes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.multiplayermodes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_MultiplayerModeResult, rhs: Proto_MultiplayerModeResult) -> Bool {
    if lhs.multiplayermodes != rhs.multiplayermodes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_MultiplayerMode: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".MultiplayerMode"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "campaigncoop"),
    3: .same(proto: "dropin"),
    4: .same(proto: "game"),
    5: .same(proto: "lancoop"),
    6: .same(proto: "offlinecoop"),
    7: .same(proto: "offlinecoopmax"),
    8: .same(proto: "offlinemax"),
    9: .same(proto: "onlinecoop"),
    10: .same(proto: "onlinecoopmax"),
    11: .same(proto: "onlinemax"),
    12: .same(proto: "platform"),
    13: .same(proto: "splitscreen"),
    14: .same(proto: "splitscreenonline"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _campaigncoop: Bool = false
    var _dropin: Bool = false
    var _game: Proto_Game? = nil
    var _lancoop: Bool = false
    var _offlinecoop: Bool = false
    var _offlinecoopmax: Int32 = 0
    var _offlinemax: Int32 = 0
    var _onlinecoop: Bool = false
    var _onlinecoopmax: Int32 = 0
    var _onlinemax: Int32 = 0
    var _platform: Proto_Platform? = nil
    var _splitscreen: Bool = false
    var _splitscreenonline: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _campaigncoop = source._campaigncoop
      _dropin = source._dropin
      _game = source._game
      _lancoop = source._lancoop
      _offlinecoop = source._offlinecoop
      _offlinecoopmax = source._offlinecoopmax
      _offlinemax = source._offlinemax
      _onlinecoop = source._onlinecoop
      _onlinecoopmax = source._onlinecoopmax
      _onlinemax = source._onlinemax
      _platform = source._platform
      _splitscreen = source._splitscreen
      _splitscreenonline = source._splitscreenonline
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._campaigncoop)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._dropin)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._lancoop)
        case 6: try decoder.decodeSingularBoolField(value: &_storage._offlinecoop)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._offlinecoopmax)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._offlinemax)
        case 9: try decoder.decodeSingularBoolField(value: &_storage._onlinecoop)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._onlinecoopmax)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._onlinemax)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._platform)
        case 13: try decoder.decodeSingularBoolField(value: &_storage._splitscreen)
        case 14: try decoder.decodeSingularBoolField(value: &_storage._splitscreenonline)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._campaigncoop != false {
        try visitor.visitSingularBoolField(value: _storage._campaigncoop, fieldNumber: 2)
      }
      if _storage._dropin != false {
        try visitor.visitSingularBoolField(value: _storage._dropin, fieldNumber: 3)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._lancoop != false {
        try visitor.visitSingularBoolField(value: _storage._lancoop, fieldNumber: 5)
      }
      if _storage._offlinecoop != false {
        try visitor.visitSingularBoolField(value: _storage._offlinecoop, fieldNumber: 6)
      }
      if _storage._offlinecoopmax != 0 {
        try visitor.visitSingularInt32Field(value: _storage._offlinecoopmax, fieldNumber: 7)
      }
      if _storage._offlinemax != 0 {
        try visitor.visitSingularInt32Field(value: _storage._offlinemax, fieldNumber: 8)
      }
      if _storage._onlinecoop != false {
        try visitor.visitSingularBoolField(value: _storage._onlinecoop, fieldNumber: 9)
      }
      if _storage._onlinecoopmax != 0 {
        try visitor.visitSingularInt32Field(value: _storage._onlinecoopmax, fieldNumber: 10)
      }
      if _storage._onlinemax != 0 {
        try visitor.visitSingularInt32Field(value: _storage._onlinemax, fieldNumber: 11)
      }
      if let v = _storage._platform {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if _storage._splitscreen != false {
        try visitor.visitSingularBoolField(value: _storage._splitscreen, fieldNumber: 13)
      }
      if _storage._splitscreenonline != false {
        try visitor.visitSingularBoolField(value: _storage._splitscreenonline, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_MultiplayerMode, rhs: Proto_MultiplayerMode) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._campaigncoop != rhs_storage._campaigncoop {return false}
        if _storage._dropin != rhs_storage._dropin {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._lancoop != rhs_storage._lancoop {return false}
        if _storage._offlinecoop != rhs_storage._offlinecoop {return false}
        if _storage._offlinecoopmax != rhs_storage._offlinecoopmax {return false}
        if _storage._offlinemax != rhs_storage._offlinemax {return false}
        if _storage._onlinecoop != rhs_storage._onlinecoop {return false}
        if _storage._onlinecoopmax != rhs_storage._onlinecoopmax {return false}
        if _storage._onlinemax != rhs_storage._onlinemax {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._splitscreen != rhs_storage._splitscreen {return false}
        if _storage._splitscreenonline != rhs_storage._splitscreenonline {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PageResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PageResult, rhs: Proto_PageResult) -> Bool {
    if lhs.pages != rhs.pages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Page: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Page"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "background"),
    3: .same(proto: "battlenet"),
    4: .same(proto: "category"),
    5: .same(proto: "color"),
    6: .same(proto: "company"),
    7: .same(proto: "country"),
    8: .same(proto: "createdAt"),
    9: .same(proto: "description"),
    10: .same(proto: "feed"),
    11: .same(proto: "game"),
    12: .same(proto: "name"),
    13: .same(proto: "origin"),
    14: .same(proto: "pageFollowsCount"),
    15: .same(proto: "pageLogo"),
    16: .same(proto: "slug"),
    17: .same(proto: "subCategory"),
    18: .same(proto: "updatedAt"),
    19: .same(proto: "uplay"),
    20: .same(proto: "url"),
    21: .same(proto: "user"),
    22: .same(proto: "websites"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _background: Proto_PageBackground? = nil
    var _battlenet: String = String()
    var _category: Proto_PageCategoryEnum = .pageCategoryNull
    var _color: Proto_ColorColorEnum = .green
    var _company: Proto_Company? = nil
    var _country: Int32 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _feed: Proto_Feed? = nil
    var _game: Proto_Game? = nil
    var _name: String = String()
    var _origin: String = String()
    var _pageFollowsCount: Int32 = 0
    var _pageLogo: Proto_PageLogo? = nil
    var _slug: String = String()
    var _subCategory: Proto_PageSubCategoryEnum = .pageSubCategoryNull
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _uplay: String = String()
    var _url: String = String()
    var _user: Proto_User? = nil
    var _websites: [Proto_PageWebsite] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _background = source._background
      _battlenet = source._battlenet
      _category = source._category
      _color = source._color
      _company = source._company
      _country = source._country
      _createdAt = source._createdAt
      _description_p = source._description_p
      _feed = source._feed
      _game = source._game
      _name = source._name
      _origin = source._origin
      _pageFollowsCount = source._pageFollowsCount
      _pageLogo = source._pageLogo
      _slug = source._slug
      _subCategory = source._subCategory
      _updatedAt = source._updatedAt
      _uplay = source._uplay
      _url = source._url
      _user = source._user
      _websites = source._websites
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._background)
        case 3: try decoder.decodeSingularStringField(value: &_storage._battlenet)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 5: try decoder.decodeSingularEnumField(value: &_storage._color)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._company)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._country)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 9: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._feed)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 12: try decoder.decodeSingularStringField(value: &_storage._name)
        case 13: try decoder.decodeSingularStringField(value: &_storage._origin)
        case 14: try decoder.decodeSingularInt32Field(value: &_storage._pageFollowsCount)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._pageLogo)
        case 16: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 17: try decoder.decodeSingularEnumField(value: &_storage._subCategory)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 19: try decoder.decodeSingularStringField(value: &_storage._uplay)
        case 20: try decoder.decodeSingularStringField(value: &_storage._url)
        case 21: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 22: try decoder.decodeRepeatedMessageField(value: &_storage._websites)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._background {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._battlenet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._battlenet, fieldNumber: 3)
      }
      if _storage._category != .pageCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 4)
      }
      if _storage._color != .green {
        try visitor.visitSingularEnumField(value: _storage._color, fieldNumber: 5)
      }
      if let v = _storage._company {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if _storage._country != 0 {
        try visitor.visitSingularInt32Field(value: _storage._country, fieldNumber: 7)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 9)
      }
      if let v = _storage._feed {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 12)
      }
      if !_storage._origin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origin, fieldNumber: 13)
      }
      if _storage._pageFollowsCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._pageFollowsCount, fieldNumber: 14)
      }
      if let v = _storage._pageLogo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 16)
      }
      if _storage._subCategory != .pageSubCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._subCategory, fieldNumber: 17)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if !_storage._uplay.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uplay, fieldNumber: 19)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 20)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 21)
      }
      if !_storage._websites.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._websites, fieldNumber: 22)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Page, rhs: Proto_Page) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._background != rhs_storage._background {return false}
        if _storage._battlenet != rhs_storage._battlenet {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._company != rhs_storage._company {return false}
        if _storage._country != rhs_storage._country {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._feed != rhs_storage._feed {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._pageFollowsCount != rhs_storage._pageFollowsCount {return false}
        if _storage._pageLogo != rhs_storage._pageLogo {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._subCategory != rhs_storage._subCategory {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._uplay != rhs_storage._uplay {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._websites != rhs_storage._websites {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PageBackgroundResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageBackgroundResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagebackgrounds"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pagebackgrounds)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pagebackgrounds.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pagebackgrounds, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PageBackgroundResult, rhs: Proto_PageBackgroundResult) -> Bool {
    if lhs.pagebackgrounds != rhs.pagebackgrounds {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PageBackground: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageBackground"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "height"),
    5: .same(proto: "imageId"),
    6: .same(proto: "url"),
    7: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.alphaChannel)
      case 3: try decoder.decodeSingularBoolField(value: &self.animated)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.imageID)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.alphaChannel != false {
      try visitor.visitSingularBoolField(value: self.alphaChannel, fieldNumber: 2)
    }
    if self.animated != false {
      try visitor.visitSingularBoolField(value: self.animated, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PageBackground, rhs: Proto_PageBackground) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.alphaChannel != rhs.alphaChannel {return false}
    if lhs.animated != rhs.animated {return false}
    if lhs.height != rhs.height {return false}
    if lhs.imageID != rhs.imageID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PageLogoResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageLogoResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagelogos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pagelogos)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pagelogos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pagelogos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PageLogoResult, rhs: Proto_PageLogoResult) -> Bool {
    if lhs.pagelogos != rhs.pagelogos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PageLogo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageLogo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "height"),
    5: .same(proto: "imageId"),
    6: .same(proto: "url"),
    7: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.alphaChannel)
      case 3: try decoder.decodeSingularBoolField(value: &self.animated)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.imageID)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.alphaChannel != false {
      try visitor.visitSingularBoolField(value: self.alphaChannel, fieldNumber: 2)
    }
    if self.animated != false {
      try visitor.visitSingularBoolField(value: self.animated, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PageLogo, rhs: Proto_PageLogo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.alphaChannel != rhs.alphaChannel {return false}
    if lhs.animated != rhs.animated {return false}
    if lhs.height != rhs.height {return false}
    if lhs.imageID != rhs.imageID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PageWebsiteResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageWebsiteResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pagewebsites"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pagewebsites)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pagewebsites.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pagewebsites, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PageWebsiteResult, rhs: Proto_PageWebsiteResult) -> Bool {
    if lhs.pagewebsites != rhs.pagewebsites {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PageWebsite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PageWebsite"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "trusted"),
    4: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.category)
      case 3: try decoder.decodeSingularBoolField(value: &self.trusted)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.category != .websiteCategoryNull {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 2)
    }
    if self.trusted != false {
      try visitor.visitSingularBoolField(value: self.trusted, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PageWebsite, rhs: Proto_PageWebsite) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.category != rhs.category {return false}
    if lhs.trusted != rhs.trusted {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PersonResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PersonResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "people"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.people)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.people.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.people, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PersonResult, rhs: Proto_PersonResult) -> Bool {
    if lhs.people != rhs.people {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Person: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Person"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "bio"),
    3: .same(proto: "characters"),
    4: .same(proto: "country"),
    5: .same(proto: "createdAt"),
    6: .same(proto: "creditedGames"),
    7: .same(proto: "description"),
    8: .same(proto: "dob"),
    9: .same(proto: "gender"),
    10: .same(proto: "lovesCount"),
    11: .same(proto: "mugShot"),
    12: .same(proto: "name"),
    13: .same(proto: "nicknames"),
    14: .same(proto: "parent"),
    15: .same(proto: "slug"),
    16: .same(proto: "updatedAt"),
    17: .same(proto: "url"),
    18: .same(proto: "voiceActed"),
    19: .same(proto: "websites"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _bio: String = String()
    var _characters: [Proto_Character] = []
    var _country: Int32 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _creditedGames: [Proto_Game] = []
    var _description_p: String = String()
    var _dob: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _gender: Proto_GenderGenderEnum = .genderGenderNull
    var _lovesCount: Int32 = 0
    var _mugShot: Proto_PersonMugShot? = nil
    var _name: String = String()
    var _nicknames: [String] = []
    var _parent: Proto_Person? = nil
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()
    var _voiceActed: [Proto_Game] = []
    var _websites: [Proto_PersonWebsite] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _bio = source._bio
      _characters = source._characters
      _country = source._country
      _createdAt = source._createdAt
      _creditedGames = source._creditedGames
      _description_p = source._description_p
      _dob = source._dob
      _gender = source._gender
      _lovesCount = source._lovesCount
      _mugShot = source._mugShot
      _name = source._name
      _nicknames = source._nicknames
      _parent = source._parent
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
      _voiceActed = source._voiceActed
      _websites = source._websites
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._bio)
        case 3: try decoder.decodeRepeatedMessageField(value: &_storage._characters)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._country)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._creditedGames)
        case 7: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._dob)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._gender)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._lovesCount)
        case 11: try decoder.decodeSingularMessageField(value: &_storage._mugShot)
        case 12: try decoder.decodeSingularStringField(value: &_storage._name)
        case 13: try decoder.decodeRepeatedStringField(value: &_storage._nicknames)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._parent)
        case 15: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 17: try decoder.decodeSingularStringField(value: &_storage._url)
        case 18: try decoder.decodeRepeatedMessageField(value: &_storage._voiceActed)
        case 19: try decoder.decodeRepeatedMessageField(value: &_storage._websites)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._bio.isEmpty {
        try visitor.visitSingularStringField(value: _storage._bio, fieldNumber: 2)
      }
      if !_storage._characters.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._characters, fieldNumber: 3)
      }
      if _storage._country != 0 {
        try visitor.visitSingularInt32Field(value: _storage._country, fieldNumber: 4)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._creditedGames.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._creditedGames, fieldNumber: 6)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 7)
      }
      if let v = _storage._dob {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _storage._gender != .genderGenderNull {
        try visitor.visitSingularEnumField(value: _storage._gender, fieldNumber: 9)
      }
      if _storage._lovesCount != 0 {
        try visitor.visitSingularInt32Field(value: _storage._lovesCount, fieldNumber: 10)
      }
      if let v = _storage._mugShot {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 11)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 12)
      }
      if !_storage._nicknames.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._nicknames, fieldNumber: 13)
      }
      if let v = _storage._parent {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 15)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 17)
      }
      if !_storage._voiceActed.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._voiceActed, fieldNumber: 18)
      }
      if !_storage._websites.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._websites, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Person, rhs: Proto_Person) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._bio != rhs_storage._bio {return false}
        if _storage._characters != rhs_storage._characters {return false}
        if _storage._country != rhs_storage._country {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._creditedGames != rhs_storage._creditedGames {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._dob != rhs_storage._dob {return false}
        if _storage._gender != rhs_storage._gender {return false}
        if _storage._lovesCount != rhs_storage._lovesCount {return false}
        if _storage._mugShot != rhs_storage._mugShot {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._nicknames != rhs_storage._nicknames {return false}
        if _storage._parent != rhs_storage._parent {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._voiceActed != rhs_storage._voiceActed {return false}
        if _storage._websites != rhs_storage._websites {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PersonMugShotResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PersonMugShotResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "personmugshots"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.personmugshots)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.personmugshots.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.personmugshots, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PersonMugShotResult, rhs: Proto_PersonMugShotResult) -> Bool {
    if lhs.personmugshots != rhs.personmugshots {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PersonMugShot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PersonMugShot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "height"),
    3: .same(proto: "imageId"),
    4: .same(proto: "url"),
    5: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularInt32Field(value: &self.height)
      case 3: try decoder.decodeSingularStringField(value: &self.imageID)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      case 5: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 2)
    }
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 5)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PersonMugShot, rhs: Proto_PersonMugShot) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.height != rhs.height {return false}
    if lhs.imageID != rhs.imageID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PersonWebsiteResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PersonWebsiteResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "personwebsites"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.personwebsites)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.personwebsites.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.personwebsites, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PersonWebsiteResult, rhs: Proto_PersonWebsiteResult) -> Bool {
    if lhs.personwebsites != rhs.personwebsites {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PersonWebsite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PersonWebsite"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "trusted"),
    4: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.category)
      case 3: try decoder.decodeSingularBoolField(value: &self.trusted)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.category != .websiteCategoryNull {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 2)
    }
    if self.trusted != false {
      try visitor.visitSingularBoolField(value: self.trusted, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PersonWebsite, rhs: Proto_PersonWebsite) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.category != rhs.category {return false}
    if lhs.trusted != rhs.trusted {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platforms"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.platforms)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platforms.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.platforms, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformResult, rhs: Proto_PlatformResult) -> Bool {
    if lhs.platforms != rhs.platforms {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Platform: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Platform"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "abbreviation"),
    3: .same(proto: "alternativeName"),
    4: .same(proto: "category"),
    5: .same(proto: "createdAt"),
    6: .same(proto: "generation"),
    7: .same(proto: "name"),
    8: .same(proto: "platformLogo"),
    9: .same(proto: "productFamily"),
    10: .same(proto: "slug"),
    11: .same(proto: "summary"),
    12: .same(proto: "updatedAt"),
    13: .same(proto: "url"),
    14: .same(proto: "versions"),
    15: .same(proto: "websites"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _abbreviation: String = String()
    var _alternativeName: String = String()
    var _category: Proto_PlatformCategoryEnum = .platformCategoryNull
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _generation: Int32 = 0
    var _name: String = String()
    var _platformLogo: Proto_PlatformLogo? = nil
    var _productFamily: Proto_ProductFamily? = nil
    var _slug: String = String()
    var _summary: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()
    var _versions: [Proto_PlatformVersion] = []
    var _websites: [Proto_PlatformWebsite] = []

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _abbreviation = source._abbreviation
      _alternativeName = source._alternativeName
      _category = source._category
      _createdAt = source._createdAt
      _generation = source._generation
      _name = source._name
      _platformLogo = source._platformLogo
      _productFamily = source._productFamily
      _slug = source._slug
      _summary = source._summary
      _updatedAt = source._updatedAt
      _url = source._url
      _versions = source._versions
      _websites = source._websites
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._abbreviation)
        case 3: try decoder.decodeSingularStringField(value: &_storage._alternativeName)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._generation)
        case 7: try decoder.decodeSingularStringField(value: &_storage._name)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._platformLogo)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._productFamily)
        case 10: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 11: try decoder.decodeSingularStringField(value: &_storage._summary)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 13: try decoder.decodeSingularStringField(value: &_storage._url)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._versions)
        case 15: try decoder.decodeRepeatedMessageField(value: &_storage._websites)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._abbreviation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._abbreviation, fieldNumber: 2)
      }
      if !_storage._alternativeName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._alternativeName, fieldNumber: 3)
      }
      if _storage._category != .platformCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 4)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._generation != 0 {
        try visitor.visitSingularInt32Field(value: _storage._generation, fieldNumber: 6)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 7)
      }
      if let v = _storage._platformLogo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._productFamily {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 10)
      }
      if !_storage._summary.isEmpty {
        try visitor.visitSingularStringField(value: _storage._summary, fieldNumber: 11)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 13)
      }
      if !_storage._versions.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._versions, fieldNumber: 14)
      }
      if !_storage._websites.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._websites, fieldNumber: 15)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Platform, rhs: Proto_Platform) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._abbreviation != rhs_storage._abbreviation {return false}
        if _storage._alternativeName != rhs_storage._alternativeName {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._generation != rhs_storage._generation {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._platformLogo != rhs_storage._platformLogo {return false}
        if _storage._productFamily != rhs_storage._productFamily {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._versions != rhs_storage._versions {return false}
        if _storage._websites != rhs_storage._websites {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformLogoResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformLogoResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platformlogos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.platformlogos)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platformlogos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.platformlogos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformLogoResult, rhs: Proto_PlatformLogoResult) -> Bool {
    if lhs.platformlogos != rhs.platformlogos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformLogo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformLogo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "height"),
    5: .same(proto: "imageId"),
    6: .same(proto: "url"),
    7: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.alphaChannel)
      case 3: try decoder.decodeSingularBoolField(value: &self.animated)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.imageID)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.alphaChannel != false {
      try visitor.visitSingularBoolField(value: self.alphaChannel, fieldNumber: 2)
    }
    if self.animated != false {
      try visitor.visitSingularBoolField(value: self.animated, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformLogo, rhs: Proto_PlatformLogo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.alphaChannel != rhs.alphaChannel {return false}
    if lhs.animated != rhs.animated {return false}
    if lhs.height != rhs.height {return false}
    if lhs.imageID != rhs.imageID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformVersionResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformVersionResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platformversions"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.platformversions)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platformversions.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.platformversions, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformVersionResult, rhs: Proto_PlatformVersionResult) -> Bool {
    if lhs.platformversions != rhs.platformversions {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformVersion: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformVersion"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "companies"),
    3: .same(proto: "connectivity"),
    4: .same(proto: "cpu"),
    5: .same(proto: "graphics"),
    6: .same(proto: "mainManufacturer"),
    7: .same(proto: "media"),
    8: .same(proto: "memory"),
    9: .same(proto: "name"),
    10: .same(proto: "online"),
    11: .same(proto: "os"),
    12: .same(proto: "output"),
    13: .same(proto: "platformLogo"),
    14: .same(proto: "platformVersionReleaseDates"),
    15: .same(proto: "resolutions"),
    16: .same(proto: "slug"),
    17: .same(proto: "sound"),
    18: .same(proto: "storage"),
    19: .same(proto: "summary"),
    20: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _companies: [Proto_PlatformVersionCompany] = []
    var _connectivity: String = String()
    var _cpu: String = String()
    var _graphics: String = String()
    var _mainManufacturer: Proto_PlatformVersionCompany? = nil
    var _media: String = String()
    var _memory: String = String()
    var _name: String = String()
    var _online: String = String()
    var _os: String = String()
    var _output: String = String()
    var _platformLogo: Proto_PlatformLogo? = nil
    var _platformVersionReleaseDates: [Proto_PlatformVersionReleaseDate] = []
    var _resolutions: String = String()
    var _slug: String = String()
    var _sound: String = String()
    var _storage: String = String()
    var _summary: String = String()
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _companies = source._companies
      _connectivity = source._connectivity
      _cpu = source._cpu
      _graphics = source._graphics
      _mainManufacturer = source._mainManufacturer
      _media = source._media
      _memory = source._memory
      _name = source._name
      _online = source._online
      _os = source._os
      _output = source._output
      _platformLogo = source._platformLogo
      _platformVersionReleaseDates = source._platformVersionReleaseDates
      _resolutions = source._resolutions
      _slug = source._slug
      _sound = source._sound
      _storage = source._storage
      _summary = source._summary
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeRepeatedMessageField(value: &_storage._companies)
        case 3: try decoder.decodeSingularStringField(value: &_storage._connectivity)
        case 4: try decoder.decodeSingularStringField(value: &_storage._cpu)
        case 5: try decoder.decodeSingularStringField(value: &_storage._graphics)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._mainManufacturer)
        case 7: try decoder.decodeSingularStringField(value: &_storage._media)
        case 8: try decoder.decodeSingularStringField(value: &_storage._memory)
        case 9: try decoder.decodeSingularStringField(value: &_storage._name)
        case 10: try decoder.decodeSingularStringField(value: &_storage._online)
        case 11: try decoder.decodeSingularStringField(value: &_storage._os)
        case 12: try decoder.decodeSingularStringField(value: &_storage._output)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._platformLogo)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._platformVersionReleaseDates)
        case 15: try decoder.decodeSingularStringField(value: &_storage._resolutions)
        case 16: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 17: try decoder.decodeSingularStringField(value: &_storage._sound)
        case 18: try decoder.decodeSingularStringField(value: &_storage._storage)
        case 19: try decoder.decodeSingularStringField(value: &_storage._summary)
        case 20: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._companies.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._companies, fieldNumber: 2)
      }
      if !_storage._connectivity.isEmpty {
        try visitor.visitSingularStringField(value: _storage._connectivity, fieldNumber: 3)
      }
      if !_storage._cpu.isEmpty {
        try visitor.visitSingularStringField(value: _storage._cpu, fieldNumber: 4)
      }
      if !_storage._graphics.isEmpty {
        try visitor.visitSingularStringField(value: _storage._graphics, fieldNumber: 5)
      }
      if let v = _storage._mainManufacturer {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._media.isEmpty {
        try visitor.visitSingularStringField(value: _storage._media, fieldNumber: 7)
      }
      if !_storage._memory.isEmpty {
        try visitor.visitSingularStringField(value: _storage._memory, fieldNumber: 8)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 9)
      }
      if !_storage._online.isEmpty {
        try visitor.visitSingularStringField(value: _storage._online, fieldNumber: 10)
      }
      if !_storage._os.isEmpty {
        try visitor.visitSingularStringField(value: _storage._os, fieldNumber: 11)
      }
      if !_storage._output.isEmpty {
        try visitor.visitSingularStringField(value: _storage._output, fieldNumber: 12)
      }
      if let v = _storage._platformLogo {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if !_storage._platformVersionReleaseDates.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._platformVersionReleaseDates, fieldNumber: 14)
      }
      if !_storage._resolutions.isEmpty {
        try visitor.visitSingularStringField(value: _storage._resolutions, fieldNumber: 15)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 16)
      }
      if !_storage._sound.isEmpty {
        try visitor.visitSingularStringField(value: _storage._sound, fieldNumber: 17)
      }
      if !_storage._storage.isEmpty {
        try visitor.visitSingularStringField(value: _storage._storage, fieldNumber: 18)
      }
      if !_storage._summary.isEmpty {
        try visitor.visitSingularStringField(value: _storage._summary, fieldNumber: 19)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 20)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformVersion, rhs: Proto_PlatformVersion) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._companies != rhs_storage._companies {return false}
        if _storage._connectivity != rhs_storage._connectivity {return false}
        if _storage._cpu != rhs_storage._cpu {return false}
        if _storage._graphics != rhs_storage._graphics {return false}
        if _storage._mainManufacturer != rhs_storage._mainManufacturer {return false}
        if _storage._media != rhs_storage._media {return false}
        if _storage._memory != rhs_storage._memory {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._online != rhs_storage._online {return false}
        if _storage._os != rhs_storage._os {return false}
        if _storage._output != rhs_storage._output {return false}
        if _storage._platformLogo != rhs_storage._platformLogo {return false}
        if _storage._platformVersionReleaseDates != rhs_storage._platformVersionReleaseDates {return false}
        if _storage._resolutions != rhs_storage._resolutions {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._sound != rhs_storage._sound {return false}
        if _storage._storage != rhs_storage._storage {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformVersionCompanyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformVersionCompanyResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platformversioncompanies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.platformversioncompanies)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platformversioncompanies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.platformversioncompanies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformVersionCompanyResult, rhs: Proto_PlatformVersionCompanyResult) -> Bool {
    if lhs.platformversioncompanies != rhs.platformversioncompanies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformVersionCompany: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformVersionCompany"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "comment"),
    3: .same(proto: "company"),
    4: .same(proto: "developer"),
    5: .same(proto: "manufacturer"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _comment: String = String()
    var _company: Proto_Company? = nil
    var _developer: Bool = false
    var _manufacturer: Bool = false

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _comment = source._comment
      _company = source._company
      _developer = source._developer
      _manufacturer = source._manufacturer
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._comment)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._company)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._developer)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._manufacturer)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._comment.isEmpty {
        try visitor.visitSingularStringField(value: _storage._comment, fieldNumber: 2)
      }
      if let v = _storage._company {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._developer != false {
        try visitor.visitSingularBoolField(value: _storage._developer, fieldNumber: 4)
      }
      if _storage._manufacturer != false {
        try visitor.visitSingularBoolField(value: _storage._manufacturer, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformVersionCompany, rhs: Proto_PlatformVersionCompany) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._comment != rhs_storage._comment {return false}
        if _storage._company != rhs_storage._company {return false}
        if _storage._developer != rhs_storage._developer {return false}
        if _storage._manufacturer != rhs_storage._manufacturer {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformVersionReleaseDateResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformVersionReleaseDateResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platformversionreleasedates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.platformversionreleasedates)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platformversionreleasedates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.platformversionreleasedates, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformVersionReleaseDateResult, rhs: Proto_PlatformVersionReleaseDateResult) -> Bool {
    if lhs.platformversionreleasedates != rhs.platformversionreleasedates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformVersionReleaseDate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformVersionReleaseDate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "date"),
    5: .same(proto: "human"),
    6: .same(proto: "m"),
    7: .same(proto: "platformVersion"),
    8: .same(proto: "region"),
    9: .same(proto: "updatedAt"),
    10: .same(proto: "y"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _category: Proto_DateFormatStartDateCategoryEnum = .yyyymmmmdd
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _human: String = String()
    var _m: Int32 = 0
    var _platformVersion: Proto_PlatformVersion? = nil
    var _region: Proto_RegionLanguageEnum = .regionLanguageNull
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _y: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _category = source._category
      _createdAt = source._createdAt
      _date = source._date
      _human = source._human
      _m = source._m
      _platformVersion = source._platformVersion
      _region = source._region
      _updatedAt = source._updatedAt
      _y = source._y
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 5: try decoder.decodeSingularStringField(value: &_storage._human)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._m)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._platformVersion)
        case 8: try decoder.decodeSingularEnumField(value: &_storage._region)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._y)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._category != .yyyymmmmdd {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 2)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._human.isEmpty {
        try visitor.visitSingularStringField(value: _storage._human, fieldNumber: 5)
      }
      if _storage._m != 0 {
        try visitor.visitSingularInt32Field(value: _storage._m, fieldNumber: 6)
      }
      if let v = _storage._platformVersion {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if _storage._region != .regionLanguageNull {
        try visitor.visitSingularEnumField(value: _storage._region, fieldNumber: 8)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if _storage._y != 0 {
        try visitor.visitSingularInt32Field(value: _storage._y, fieldNumber: 10)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformVersionReleaseDate, rhs: Proto_PlatformVersionReleaseDate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._human != rhs_storage._human {return false}
        if _storage._m != rhs_storage._m {return false}
        if _storage._platformVersion != rhs_storage._platformVersion {return false}
        if _storage._region != rhs_storage._region {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._y != rhs_storage._y {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformWebsiteResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformWebsiteResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "platformwebsites"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.platformwebsites)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.platformwebsites.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.platformwebsites, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformWebsiteResult, rhs: Proto_PlatformWebsiteResult) -> Bool {
    if lhs.platformwebsites != rhs.platformwebsites {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlatformWebsite: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlatformWebsite"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "trusted"),
    4: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularEnumField(value: &self.category)
      case 3: try decoder.decodeSingularBoolField(value: &self.trusted)
      case 4: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.category != .websiteCategoryNull {
      try visitor.visitSingularEnumField(value: self.category, fieldNumber: 2)
    }
    if self.trusted != false {
      try visitor.visitSingularBoolField(value: self.trusted, fieldNumber: 3)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 4)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlatformWebsite, rhs: Proto_PlatformWebsite) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.category != rhs.category {return false}
    if lhs.trusted != rhs.trusted {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlayerPerspectiveResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerPerspectiveResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "playerperspectives"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.playerperspectives)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.playerperspectives.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.playerperspectives, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlayerPerspectiveResult, rhs: Proto_PlayerPerspectiveResult) -> Bool {
    if lhs.playerperspectives != rhs.playerperspectives {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PlayerPerspective: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PlayerPerspective"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "name"),
    4: .same(proto: "slug"),
    5: .same(proto: "updatedAt"),
    6: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _name: String = String()
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _name = source._name
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 6: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 4)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PlayerPerspective, rhs: Proto_PlayerPerspective) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ProductFamilyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductFamilyResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "productfamilies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.productfamilies)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.productfamilies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.productfamilies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ProductFamilyResult, rhs: Proto_ProductFamilyResult) -> Bool {
    if lhs.productfamilies != rhs.productfamilies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ProductFamily: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ProductFamily"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "name"),
    3: .same(proto: "slug"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularStringField(value: &self.name)
      case 3: try decoder.decodeSingularStringField(value: &self.slug)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if !self.name.isEmpty {
      try visitor.visitSingularStringField(value: self.name, fieldNumber: 2)
    }
    if !self.slug.isEmpty {
      try visitor.visitSingularStringField(value: self.slug, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ProductFamily, rhs: Proto_ProductFamily) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.name != rhs.name {return false}
    if lhs.slug != rhs.slug {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PulseResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PulseResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pulses"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pulses)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pulses.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pulses, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PulseResult, rhs: Proto_PulseResult) -> Bool {
    if lhs.pulses != rhs.pulses {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Pulse: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Pulse"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "author"),
    3: .same(proto: "category"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "ignored"),
    6: .same(proto: "image"),
    7: .same(proto: "publishedAt"),
    8: .same(proto: "pulseImage"),
    9: .same(proto: "pulseSource"),
    10: .same(proto: "summary"),
    11: .same(proto: "tags"),
    12: .same(proto: "title"),
    13: .same(proto: "uid"),
    14: .same(proto: "updatedAt"),
    15: .same(proto: "videos"),
    16: .same(proto: "website"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _author: String = String()
    var _category: Int32 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _ignored: Bool = false
    var _image: String = String()
    var _publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _pulseImage: Proto_PulseImage? = nil
    var _pulseSource: Proto_PulseSource? = nil
    var _summary: String = String()
    var _tags: [Int32] = []
    var _title: String = String()
    var _uid: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _videos: [String] = []
    var _website: Proto_PulseUrl? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _author = source._author
      _category = source._category
      _createdAt = source._createdAt
      _ignored = source._ignored
      _image = source._image
      _publishedAt = source._publishedAt
      _pulseImage = source._pulseImage
      _pulseSource = source._pulseSource
      _summary = source._summary
      _tags = source._tags
      _title = source._title
      _uid = source._uid
      _updatedAt = source._updatedAt
      _videos = source._videos
      _website = source._website
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._author)
        case 3: try decoder.decodeSingularInt32Field(value: &_storage._category)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 5: try decoder.decodeSingularBoolField(value: &_storage._ignored)
        case 6: try decoder.decodeSingularStringField(value: &_storage._image)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._publishedAt)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._pulseImage)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._pulseSource)
        case 10: try decoder.decodeSingularStringField(value: &_storage._summary)
        case 11: try decoder.decodeRepeatedInt32Field(value: &_storage._tags)
        case 12: try decoder.decodeSingularStringField(value: &_storage._title)
        case 13: try decoder.decodeSingularStringField(value: &_storage._uid)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 15: try decoder.decodeRepeatedStringField(value: &_storage._videos)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._website)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._author.isEmpty {
        try visitor.visitSingularStringField(value: _storage._author, fieldNumber: 2)
      }
      if _storage._category != 0 {
        try visitor.visitSingularInt32Field(value: _storage._category, fieldNumber: 3)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._ignored != false {
        try visitor.visitSingularBoolField(value: _storage._ignored, fieldNumber: 5)
      }
      if !_storage._image.isEmpty {
        try visitor.visitSingularStringField(value: _storage._image, fieldNumber: 6)
      }
      if let v = _storage._publishedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if let v = _storage._pulseImage {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if let v = _storage._pulseSource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if !_storage._summary.isEmpty {
        try visitor.visitSingularStringField(value: _storage._summary, fieldNumber: 10)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._tags, fieldNumber: 11)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 12)
      }
      if !_storage._uid.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uid, fieldNumber: 13)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._videos.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._videos, fieldNumber: 15)
      }
      if let v = _storage._website {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Pulse, rhs: Proto_Pulse) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._author != rhs_storage._author {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._ignored != rhs_storage._ignored {return false}
        if _storage._image != rhs_storage._image {return false}
        if _storage._publishedAt != rhs_storage._publishedAt {return false}
        if _storage._pulseImage != rhs_storage._pulseImage {return false}
        if _storage._pulseSource != rhs_storage._pulseSource {return false}
        if _storage._summary != rhs_storage._summary {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._uid != rhs_storage._uid {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._videos != rhs_storage._videos {return false}
        if _storage._website != rhs_storage._website {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PulseGroupResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PulseGroupResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pulsegroups"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pulsegroups)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pulsegroups.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pulsegroups, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PulseGroupResult, rhs: Proto_PulseGroupResult) -> Bool {
    if lhs.pulsegroups != rhs.pulsegroups {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PulseGroup: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PulseGroup"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "game"),
    4: .same(proto: "name"),
    5: .same(proto: "publishedAt"),
    6: .same(proto: "pulses"),
    7: .same(proto: "tags"),
    8: .same(proto: "updatedAt"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _game: Proto_Game? = nil
    var _name: String = String()
    var _publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _pulses: [Proto_Pulse] = []
    var _tags: [Int32] = []
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _game = source._game
      _name = source._name
      _publishedAt = source._publishedAt
      _pulses = source._pulses
      _tags = source._tags
      _updatedAt = source._updatedAt
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 4: try decoder.decodeSingularStringField(value: &_storage._name)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._publishedAt)
        case 6: try decoder.decodeRepeatedMessageField(value: &_storage._pulses)
        case 7: try decoder.decodeRepeatedInt32Field(value: &_storage._tags)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 4)
      }
      if let v = _storage._publishedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._pulses.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._pulses, fieldNumber: 6)
      }
      if !_storage._tags.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._tags, fieldNumber: 7)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PulseGroup, rhs: Proto_PulseGroup) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._publishedAt != rhs_storage._publishedAt {return false}
        if _storage._pulses != rhs_storage._pulses {return false}
        if _storage._tags != rhs_storage._tags {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PulseImageResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PulseImageResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pulseimages"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pulseimages)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pulseimages.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pulseimages, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PulseImageResult, rhs: Proto_PulseImageResult) -> Bool {
    if lhs.pulseimages != rhs.pulseimages {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PulseImage: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PulseImage"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "height"),
    5: .same(proto: "imageId"),
    6: .same(proto: "url"),
    7: .same(proto: "width"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.alphaChannel)
      case 3: try decoder.decodeSingularBoolField(value: &self.animated)
      case 4: try decoder.decodeSingularInt32Field(value: &self.height)
      case 5: try decoder.decodeSingularStringField(value: &self.imageID)
      case 6: try decoder.decodeSingularStringField(value: &self.url)
      case 7: try decoder.decodeSingularInt32Field(value: &self.width)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.alphaChannel != false {
      try visitor.visitSingularBoolField(value: self.alphaChannel, fieldNumber: 2)
    }
    if self.animated != false {
      try visitor.visitSingularBoolField(value: self.animated, fieldNumber: 3)
    }
    if self.height != 0 {
      try visitor.visitSingularInt32Field(value: self.height, fieldNumber: 4)
    }
    if !self.imageID.isEmpty {
      try visitor.visitSingularStringField(value: self.imageID, fieldNumber: 5)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 6)
    }
    if self.width != 0 {
      try visitor.visitSingularInt32Field(value: self.width, fieldNumber: 7)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PulseImage, rhs: Proto_PulseImage) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.alphaChannel != rhs.alphaChannel {return false}
    if lhs.animated != rhs.animated {return false}
    if lhs.height != rhs.height {return false}
    if lhs.imageID != rhs.imageID {return false}
    if lhs.url != rhs.url {return false}
    if lhs.width != rhs.width {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PulseSourceResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PulseSourceResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pulsesources"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pulsesources)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pulsesources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pulsesources, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PulseSourceResult, rhs: Proto_PulseSourceResult) -> Bool {
    if lhs.pulsesources != rhs.pulsesources {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PulseSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PulseSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "game"),
    3: .same(proto: "name"),
    4: .same(proto: "page"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _game: Proto_Game? = nil
    var _name: String = String()
    var _page: Proto_Page? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _game = source._game
      _name = source._name
      _page = source._page
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._page)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if let v = _storage._page {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PulseSource, rhs: Proto_PulseSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._page != rhs_storage._page {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PulseUrlResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PulseUrlResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "pulseurls"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.pulseurls)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.pulseurls.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.pulseurls, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PulseUrlResult, rhs: Proto_PulseUrlResult) -> Bool {
    if lhs.pulseurls != rhs.pulseurls {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_PulseUrl: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".PulseUrl"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "trusted"),
    3: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.trusted)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.trusted != false {
      try visitor.visitSingularBoolField(value: self.trusted, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_PulseUrl, rhs: Proto_PulseUrl) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.trusted != rhs.trusted {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_RateResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".RateResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "rates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.rates)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.rates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.rates, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_RateResult, rhs: Proto_RateResult) -> Bool {
    if lhs.rates != rhs.rates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Rate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Rate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "game"),
    3: .same(proto: "rating"),
    4: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _game: Proto_Game? = nil
    var _rating: Double = 0
    var _user: Proto_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _game = source._game
      _rating = source._rating
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 3: try decoder.decodeSingularDoubleField(value: &_storage._rating)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if _storage._rating != 0 {
        try visitor.visitSingularDoubleField(value: _storage._rating, fieldNumber: 3)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Rate, rhs: Proto_Rate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._rating != rhs_storage._rating {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ReleaseDateResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReleaseDateResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "releasedates"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.releasedates)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.releasedates.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.releasedates, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ReleaseDateResult, rhs: Proto_ReleaseDateResult) -> Bool {
    if lhs.releasedates != rhs.releasedates {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ReleaseDate: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReleaseDate"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "date"),
    5: .same(proto: "game"),
    6: .same(proto: "human"),
    7: .same(proto: "m"),
    8: .same(proto: "platform"),
    9: .same(proto: "region"),
    10: .same(proto: "updatedAt"),
    11: .same(proto: "y"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _category: Proto_DateFormatStartDateCategoryEnum = .yyyymmmmdd
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _date: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _game: Proto_Game? = nil
    var _human: String = String()
    var _m: Int32 = 0
    var _platform: Proto_Platform? = nil
    var _region: Proto_RegionLanguageEnum = .regionLanguageNull
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _y: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _category = source._category
      _createdAt = source._createdAt
      _date = source._date
      _game = source._game
      _human = source._human
      _m = source._m
      _platform = source._platform
      _region = source._region
      _updatedAt = source._updatedAt
      _y = source._y
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._date)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 6: try decoder.decodeSingularStringField(value: &_storage._human)
        case 7: try decoder.decodeSingularInt32Field(value: &_storage._m)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._platform)
        case 9: try decoder.decodeSingularEnumField(value: &_storage._region)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 11: try decoder.decodeSingularInt32Field(value: &_storage._y)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._category != .yyyymmmmdd {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 2)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._date {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._human.isEmpty {
        try visitor.visitSingularStringField(value: _storage._human, fieldNumber: 6)
      }
      if _storage._m != 0 {
        try visitor.visitSingularInt32Field(value: _storage._m, fieldNumber: 7)
      }
      if let v = _storage._platform {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if _storage._region != .regionLanguageNull {
        try visitor.visitSingularEnumField(value: _storage._region, fieldNumber: 9)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._y != 0 {
        try visitor.visitSingularInt32Field(value: _storage._y, fieldNumber: 11)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ReleaseDate, rhs: Proto_ReleaseDate) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._date != rhs_storage._date {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._human != rhs_storage._human {return false}
        if _storage._m != rhs_storage._m {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._region != rhs_storage._region {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._y != rhs_storage._y {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ReviewResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReviewResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reviews"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.reviews)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reviews.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reviews, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ReviewResult, rhs: Proto_ReviewResult) -> Bool {
    if lhs.reviews != rhs.reviews {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Review: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Review"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "conclusion"),
    4: .same(proto: "content"),
    5: .same(proto: "createdAt"),
    6: .same(proto: "game"),
    7: .same(proto: "introduction"),
    8: .same(proto: "likes"),
    9: .same(proto: "negativePoints"),
    10: .same(proto: "platform"),
    11: .same(proto: "positivePoints"),
    12: .same(proto: "slug"),
    13: .same(proto: "title"),
    14: .same(proto: "updatedAt"),
    15: .same(proto: "url"),
    16: .same(proto: "user"),
    17: .same(proto: "userRating"),
    18: .same(proto: "video"),
    19: .same(proto: "views"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _category: Proto_ReviewCategoryEnum = .reviewCategoryNull
    var _conclusion: String = String()
    var _content: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _game: Proto_Game? = nil
    var _introduction: String = String()
    var _likes: Int32 = 0
    var _negativePoints: String = String()
    var _platform: Proto_Platform? = nil
    var _positivePoints: String = String()
    var _slug: String = String()
    var _title: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()
    var _user: Proto_User? = nil
    var _userRating: Proto_Rate? = nil
    var _video: Proto_ReviewVideo? = nil
    var _views: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _category = source._category
      _conclusion = source._conclusion
      _content = source._content
      _createdAt = source._createdAt
      _game = source._game
      _introduction = source._introduction
      _likes = source._likes
      _negativePoints = source._negativePoints
      _platform = source._platform
      _positivePoints = source._positivePoints
      _slug = source._slug
      _title = source._title
      _updatedAt = source._updatedAt
      _url = source._url
      _user = source._user
      _userRating = source._userRating
      _video = source._video
      _views = source._views
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 3: try decoder.decodeSingularStringField(value: &_storage._conclusion)
        case 4: try decoder.decodeSingularStringField(value: &_storage._content)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 7: try decoder.decodeSingularStringField(value: &_storage._introduction)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._likes)
        case 9: try decoder.decodeSingularStringField(value: &_storage._negativePoints)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._platform)
        case 11: try decoder.decodeSingularStringField(value: &_storage._positivePoints)
        case 12: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 13: try decoder.decodeSingularStringField(value: &_storage._title)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 15: try decoder.decodeSingularStringField(value: &_storage._url)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._user)
        case 17: try decoder.decodeSingularMessageField(value: &_storage._userRating)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._video)
        case 19: try decoder.decodeSingularInt32Field(value: &_storage._views)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._category != .reviewCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 2)
      }
      if !_storage._conclusion.isEmpty {
        try visitor.visitSingularStringField(value: _storage._conclusion, fieldNumber: 3)
      }
      if !_storage._content.isEmpty {
        try visitor.visitSingularStringField(value: _storage._content, fieldNumber: 4)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._introduction.isEmpty {
        try visitor.visitSingularStringField(value: _storage._introduction, fieldNumber: 7)
      }
      if _storage._likes != 0 {
        try visitor.visitSingularInt32Field(value: _storage._likes, fieldNumber: 8)
      }
      if !_storage._negativePoints.isEmpty {
        try visitor.visitSingularStringField(value: _storage._negativePoints, fieldNumber: 9)
      }
      if let v = _storage._platform {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if !_storage._positivePoints.isEmpty {
        try visitor.visitSingularStringField(value: _storage._positivePoints, fieldNumber: 11)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 12)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 13)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 15)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if let v = _storage._userRating {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 17)
      }
      if let v = _storage._video {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
      if _storage._views != 0 {
        try visitor.visitSingularInt32Field(value: _storage._views, fieldNumber: 19)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Review, rhs: Proto_Review) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._conclusion != rhs_storage._conclusion {return false}
        if _storage._content != rhs_storage._content {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._introduction != rhs_storage._introduction {return false}
        if _storage._likes != rhs_storage._likes {return false}
        if _storage._negativePoints != rhs_storage._negativePoints {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._positivePoints != rhs_storage._positivePoints {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._user != rhs_storage._user {return false}
        if _storage._userRating != rhs_storage._userRating {return false}
        if _storage._video != rhs_storage._video {return false}
        if _storage._views != rhs_storage._views {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ReviewVideoResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReviewVideoResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "reviewvideos"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.reviewvideos)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.reviewvideos.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.reviewvideos, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ReviewVideoResult, rhs: Proto_ReviewVideoResult) -> Bool {
    if lhs.reviewvideos != rhs.reviewvideos {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ReviewVideo: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ReviewVideo"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "trusted"),
    3: .same(proto: "url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularUInt64Field(value: &self.id)
      case 2: try decoder.decodeSingularBoolField(value: &self.trusted)
      case 3: try decoder.decodeSingularStringField(value: &self.url)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if self.id != 0 {
      try visitor.visitSingularUInt64Field(value: self.id, fieldNumber: 1)
    }
    if self.trusted != false {
      try visitor.visitSingularBoolField(value: self.trusted, fieldNumber: 2)
    }
    if !self.url.isEmpty {
      try visitor.visitSingularStringField(value: self.url, fieldNumber: 3)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ReviewVideo, rhs: Proto_ReviewVideo) -> Bool {
    if lhs.id != rhs.id {return false}
    if lhs.trusted != rhs.trusted {return false}
    if lhs.url != rhs.url {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ScreenshotResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ScreenshotResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "screenshots"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.screenshots)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.screenshots.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.screenshots, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ScreenshotResult, rhs: Proto_ScreenshotResult) -> Bool {
    if lhs.screenshots != rhs.screenshots {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Screenshot: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Screenshot"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alphaChannel"),
    3: .same(proto: "animated"),
    4: .same(proto: "game"),
    5: .same(proto: "height"),
    6: .same(proto: "imageId"),
    7: .same(proto: "url"),
    8: .same(proto: "width"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _alphaChannel: Bool = false
    var _animated: Bool = false
    var _game: Proto_Game? = nil
    var _height: Int32 = 0
    var _imageID: String = String()
    var _url: String = String()
    var _width: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _alphaChannel = source._alphaChannel
      _animated = source._animated
      _game = source._game
      _height = source._height
      _imageID = source._imageID
      _url = source._url
      _width = source._width
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._alphaChannel)
        case 3: try decoder.decodeSingularBoolField(value: &_storage._animated)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._height)
        case 6: try decoder.decodeSingularStringField(value: &_storage._imageID)
        case 7: try decoder.decodeSingularStringField(value: &_storage._url)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._width)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._alphaChannel != false {
        try visitor.visitSingularBoolField(value: _storage._alphaChannel, fieldNumber: 2)
      }
      if _storage._animated != false {
        try visitor.visitSingularBoolField(value: _storage._animated, fieldNumber: 3)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._height != 0 {
        try visitor.visitSingularInt32Field(value: _storage._height, fieldNumber: 5)
      }
      if !_storage._imageID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._imageID, fieldNumber: 6)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 7)
      }
      if _storage._width != 0 {
        try visitor.visitSingularInt32Field(value: _storage._width, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Screenshot, rhs: Proto_Screenshot) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._alphaChannel != rhs_storage._alphaChannel {return false}
        if _storage._animated != rhs_storage._animated {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._height != rhs_storage._height {return false}
        if _storage._imageID != rhs_storage._imageID {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._width != rhs_storage._width {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_SearchResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SearchResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "searches"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.searches)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.searches.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.searches, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_SearchResult, rhs: Proto_SearchResult) -> Bool {
    if lhs.searches != rhs.searches {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Search: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Search"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "alternativeName"),
    3: .same(proto: "character"),
    4: .same(proto: "collection"),
    5: .same(proto: "company"),
    6: .same(proto: "description"),
    7: .same(proto: "game"),
    8: .same(proto: "name"),
    9: .same(proto: "person"),
    10: .same(proto: "platform"),
    11: .same(proto: "popularity"),
    12: .same(proto: "publishedAt"),
    13: .same(proto: "testDummy"),
    14: .same(proto: "theme"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _alternativeName: String = String()
    var _character: Proto_Character? = nil
    var _collection: Proto_Collection? = nil
    var _company: Proto_Company? = nil
    var _description_p: String = String()
    var _game: Proto_Game? = nil
    var _name: String = String()
    var _person: Proto_Person? = nil
    var _platform: Proto_Platform? = nil
    var _popularity: Double = 0
    var _publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _testDummy: Proto_TestDummy? = nil
    var _theme: Proto_Theme? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _alternativeName = source._alternativeName
      _character = source._character
      _collection = source._collection
      _company = source._company
      _description_p = source._description_p
      _game = source._game
      _name = source._name
      _person = source._person
      _platform = source._platform
      _popularity = source._popularity
      _publishedAt = source._publishedAt
      _testDummy = source._testDummy
      _theme = source._theme
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._alternativeName)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._character)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._collection)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._company)
        case 6: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 8: try decoder.decodeSingularStringField(value: &_storage._name)
        case 9: try decoder.decodeSingularMessageField(value: &_storage._person)
        case 10: try decoder.decodeSingularMessageField(value: &_storage._platform)
        case 11: try decoder.decodeSingularDoubleField(value: &_storage._popularity)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._publishedAt)
        case 13: try decoder.decodeSingularMessageField(value: &_storage._testDummy)
        case 14: try decoder.decodeSingularMessageField(value: &_storage._theme)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._alternativeName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._alternativeName, fieldNumber: 2)
      }
      if let v = _storage._character {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._collection {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if let v = _storage._company {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 6)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 8)
      }
      if let v = _storage._person {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 9)
      }
      if let v = _storage._platform {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 10)
      }
      if _storage._popularity != 0 {
        try visitor.visitSingularDoubleField(value: _storage._popularity, fieldNumber: 11)
      }
      if let v = _storage._publishedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if let v = _storage._testDummy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 13)
      }
      if let v = _storage._theme {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 14)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Search, rhs: Proto_Search) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._alternativeName != rhs_storage._alternativeName {return false}
        if _storage._character != rhs_storage._character {return false}
        if _storage._collection != rhs_storage._collection {return false}
        if _storage._company != rhs_storage._company {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._person != rhs_storage._person {return false}
        if _storage._platform != rhs_storage._platform {return false}
        if _storage._popularity != rhs_storage._popularity {return false}
        if _storage._publishedAt != rhs_storage._publishedAt {return false}
        if _storage._testDummy != rhs_storage._testDummy {return false}
        if _storage._theme != rhs_storage._theme {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_SocialMetricResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SocialMetricResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "socialmetrics"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.socialmetrics)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.socialmetrics.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.socialmetrics, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_SocialMetricResult, rhs: Proto_SocialMetricResult) -> Bool {
    if lhs.socialmetrics != rhs.socialmetrics {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_SocialMetric: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SocialMetric"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "socialMetricSource"),
    5: .same(proto: "value"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _category: Proto_SocialMetricCategoryEnum = .socialmetricCategoryNull
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _socialMetricSource: Proto_SocialMetricSource? = nil
    var _value: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _category = source._category
      _createdAt = source._createdAt
      _socialMetricSource = source._socialMetricSource
      _value = source._value
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._socialMetricSource)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._value)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._category != .socialmetricCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 2)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if let v = _storage._socialMetricSource {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if _storage._value != 0 {
        try visitor.visitSingularInt32Field(value: _storage._value, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_SocialMetric, rhs: Proto_SocialMetric) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._socialMetricSource != rhs_storage._socialMetricSource {return false}
        if _storage._value != rhs_storage._value {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_SocialMetricSourceResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SocialMetricSourceResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "socialmetricsources"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.socialmetricsources)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.socialmetricsources.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.socialmetricsources, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_SocialMetricSourceResult, rhs: Proto_SocialMetricSourceResult) -> Bool {
    if lhs.socialmetricsources != rhs.socialmetricsources {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_SocialMetricSource: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".SocialMetricSource"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "channel"),
    4: .same(proto: "channelTitle"),
    5: .same(proto: "createdAt"),
    6: .same(proto: "duration"),
    7: .same(proto: "externalId"),
    8: .same(proto: "game"),
    9: .same(proto: "internalName"),
    10: .same(proto: "meta"),
    11: .same(proto: "metricTags"),
    12: .same(proto: "publishedAt"),
    13: .same(proto: "socialMetrics"),
    14: .same(proto: "socialNetwork"),
    15: .same(proto: "title"),
    16: .same(proto: "updatedAt"),
    17: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _category: Int32 = 0
    var _channel: String = String()
    var _channelTitle: String = String()
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _duration: Int32 = 0
    var _externalID: String = String()
    var _game: Proto_Game? = nil
    var _internalName: String = String()
    var _meta: String = String()
    var _metricTags: [String] = []
    var _publishedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _socialMetrics: [Proto_SocialMetric] = []
    var _socialNetwork: Proto_SocialMetricSourceSocialNetworkEnum = .socialmetricsourceSocialNetworkNull
    var _title: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _category = source._category
      _channel = source._channel
      _channelTitle = source._channelTitle
      _createdAt = source._createdAt
      _duration = source._duration
      _externalID = source._externalID
      _game = source._game
      _internalName = source._internalName
      _meta = source._meta
      _metricTags = source._metricTags
      _publishedAt = source._publishedAt
      _socialMetrics = source._socialMetrics
      _socialNetwork = source._socialNetwork
      _title = source._title
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._category)
        case 3: try decoder.decodeSingularStringField(value: &_storage._channel)
        case 4: try decoder.decodeSingularStringField(value: &_storage._channelTitle)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 6: try decoder.decodeSingularInt32Field(value: &_storage._duration)
        case 7: try decoder.decodeSingularStringField(value: &_storage._externalID)
        case 8: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 9: try decoder.decodeSingularStringField(value: &_storage._internalName)
        case 10: try decoder.decodeSingularStringField(value: &_storage._meta)
        case 11: try decoder.decodeRepeatedStringField(value: &_storage._metricTags)
        case 12: try decoder.decodeSingularMessageField(value: &_storage._publishedAt)
        case 13: try decoder.decodeRepeatedMessageField(value: &_storage._socialMetrics)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._socialNetwork)
        case 15: try decoder.decodeSingularStringField(value: &_storage._title)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 17: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._category != 0 {
        try visitor.visitSingularInt32Field(value: _storage._category, fieldNumber: 2)
      }
      if !_storage._channel.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channel, fieldNumber: 3)
      }
      if !_storage._channelTitle.isEmpty {
        try visitor.visitSingularStringField(value: _storage._channelTitle, fieldNumber: 4)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if _storage._duration != 0 {
        try visitor.visitSingularInt32Field(value: _storage._duration, fieldNumber: 6)
      }
      if !_storage._externalID.isEmpty {
        try visitor.visitSingularStringField(value: _storage._externalID, fieldNumber: 7)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 8)
      }
      if !_storage._internalName.isEmpty {
        try visitor.visitSingularStringField(value: _storage._internalName, fieldNumber: 9)
      }
      if !_storage._meta.isEmpty {
        try visitor.visitSingularStringField(value: _storage._meta, fieldNumber: 10)
      }
      if !_storage._metricTags.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._metricTags, fieldNumber: 11)
      }
      if let v = _storage._publishedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 12)
      }
      if !_storage._socialMetrics.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._socialMetrics, fieldNumber: 13)
      }
      if _storage._socialNetwork != .socialmetricsourceSocialNetworkNull {
        try visitor.visitSingularEnumField(value: _storage._socialNetwork, fieldNumber: 14)
      }
      if !_storage._title.isEmpty {
        try visitor.visitSingularStringField(value: _storage._title, fieldNumber: 15)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 17)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_SocialMetricSource, rhs: Proto_SocialMetricSource) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._channel != rhs_storage._channel {return false}
        if _storage._channelTitle != rhs_storage._channelTitle {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._duration != rhs_storage._duration {return false}
        if _storage._externalID != rhs_storage._externalID {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._internalName != rhs_storage._internalName {return false}
        if _storage._meta != rhs_storage._meta {return false}
        if _storage._metricTags != rhs_storage._metricTags {return false}
        if _storage._publishedAt != rhs_storage._publishedAt {return false}
        if _storage._socialMetrics != rhs_storage._socialMetrics {return false}
        if _storage._socialNetwork != rhs_storage._socialNetwork {return false}
        if _storage._title != rhs_storage._title {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TestDummyResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestDummyResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "testdummies"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.testdummies)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.testdummies.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.testdummies, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TestDummyResult, rhs: Proto_TestDummyResult) -> Bool {
    if lhs.testdummies != rhs.testdummies {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TestDummy: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TestDummy"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "boolValue"),
    3: .same(proto: "createdAt"),
    4: .same(proto: "enumTest"),
    5: .same(proto: "floatValue"),
    6: .same(proto: "game"),
    7: .same(proto: "integerArray"),
    8: .same(proto: "integerValue"),
    9: .same(proto: "name"),
    10: .same(proto: "newIntegerValue"),
    11: .same(proto: "private"),
    12: .same(proto: "slug"),
    13: .same(proto: "stringArray"),
    14: .same(proto: "testDummies"),
    15: .same(proto: "testDummy"),
    16: .same(proto: "updatedAt"),
    17: .same(proto: "url"),
    18: .same(proto: "user"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _boolValue: Bool = false
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _enumTest: Proto_TestDummyEnumTestEnum = .testdummyEnumTestNull
    var _floatValue: Double = 0
    var _game: Proto_Game? = nil
    var _integerArray: [Int32] = []
    var _integerValue: Int32 = 0
    var _name: String = String()
    var _newIntegerValue: Int32 = 0
    var _private: Bool = false
    var _slug: String = String()
    var _stringArray: [String] = []
    var _testDummies: [Proto_TestDummy] = []
    var _testDummy: Proto_TestDummy? = nil
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()
    var _user: Proto_User? = nil

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _boolValue = source._boolValue
      _createdAt = source._createdAt
      _enumTest = source._enumTest
      _floatValue = source._floatValue
      _game = source._game
      _integerArray = source._integerArray
      _integerValue = source._integerValue
      _name = source._name
      _newIntegerValue = source._newIntegerValue
      _private = source._private
      _slug = source._slug
      _stringArray = source._stringArray
      _testDummies = source._testDummies
      _testDummy = source._testDummy
      _updatedAt = source._updatedAt
      _url = source._url
      _user = source._user
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularBoolField(value: &_storage._boolValue)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 4: try decoder.decodeSingularEnumField(value: &_storage._enumTest)
        case 5: try decoder.decodeSingularDoubleField(value: &_storage._floatValue)
        case 6: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 7: try decoder.decodeRepeatedInt32Field(value: &_storage._integerArray)
        case 8: try decoder.decodeSingularInt32Field(value: &_storage._integerValue)
        case 9: try decoder.decodeSingularStringField(value: &_storage._name)
        case 10: try decoder.decodeSingularInt32Field(value: &_storage._newIntegerValue)
        case 11: try decoder.decodeSingularBoolField(value: &_storage._private)
        case 12: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 13: try decoder.decodeRepeatedStringField(value: &_storage._stringArray)
        case 14: try decoder.decodeRepeatedMessageField(value: &_storage._testDummies)
        case 15: try decoder.decodeSingularMessageField(value: &_storage._testDummy)
        case 16: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 17: try decoder.decodeSingularStringField(value: &_storage._url)
        case 18: try decoder.decodeSingularMessageField(value: &_storage._user)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._boolValue != false {
        try visitor.visitSingularBoolField(value: _storage._boolValue, fieldNumber: 2)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._enumTest != .testdummyEnumTestNull {
        try visitor.visitSingularEnumField(value: _storage._enumTest, fieldNumber: 4)
      }
      if _storage._floatValue != 0 {
        try visitor.visitSingularDoubleField(value: _storage._floatValue, fieldNumber: 5)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 6)
      }
      if !_storage._integerArray.isEmpty {
        try visitor.visitPackedInt32Field(value: _storage._integerArray, fieldNumber: 7)
      }
      if _storage._integerValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._integerValue, fieldNumber: 8)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 9)
      }
      if _storage._newIntegerValue != 0 {
        try visitor.visitSingularInt32Field(value: _storage._newIntegerValue, fieldNumber: 10)
      }
      if _storage._private != false {
        try visitor.visitSingularBoolField(value: _storage._private, fieldNumber: 11)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 12)
      }
      if !_storage._stringArray.isEmpty {
        try visitor.visitRepeatedStringField(value: _storage._stringArray, fieldNumber: 13)
      }
      if !_storage._testDummies.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._testDummies, fieldNumber: 14)
      }
      if let v = _storage._testDummy {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 15)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 16)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 17)
      }
      if let v = _storage._user {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 18)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TestDummy, rhs: Proto_TestDummy) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._boolValue != rhs_storage._boolValue {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._enumTest != rhs_storage._enumTest {return false}
        if _storage._floatValue != rhs_storage._floatValue {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._integerArray != rhs_storage._integerArray {return false}
        if _storage._integerValue != rhs_storage._integerValue {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._newIntegerValue != rhs_storage._newIntegerValue {return false}
        if _storage._private != rhs_storage._private {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._stringArray != rhs_storage._stringArray {return false}
        if _storage._testDummies != rhs_storage._testDummies {return false}
        if _storage._testDummy != rhs_storage._testDummy {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._user != rhs_storage._user {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_ThemeResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".ThemeResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "themes"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.themes)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.themes.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.themes, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_ThemeResult, rhs: Proto_ThemeResult) -> Bool {
    if lhs.themes != rhs.themes {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Theme: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Theme"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "name"),
    4: .same(proto: "slug"),
    5: .same(proto: "updatedAt"),
    6: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _name: String = String()
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _name = source._name
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._name)
        case 4: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 5: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 6: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 3)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 4)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 5)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 6)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Theme, rhs: Proto_Theme) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TimeToBeatResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeToBeatResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "timetobeats"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.timetobeats)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.timetobeats.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.timetobeats, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TimeToBeatResult, rhs: Proto_TimeToBeatResult) -> Bool {
    if lhs.timetobeats != rhs.timetobeats {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TimeToBeat: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TimeToBeat"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "completely"),
    3: .same(proto: "game"),
    4: .same(proto: "hastly"),
    5: .same(proto: "normally"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _completely: Int32 = 0
    var _game: Proto_Game? = nil
    var _hastly: Int32 = 0
    var _normally: Int32 = 0

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _completely = source._completely
      _game = source._game
      _hastly = source._hastly
      _normally = source._normally
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularInt32Field(value: &_storage._completely)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 4: try decoder.decodeSingularInt32Field(value: &_storage._hastly)
        case 5: try decoder.decodeSingularInt32Field(value: &_storage._normally)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._completely != 0 {
        try visitor.visitSingularInt32Field(value: _storage._completely, fieldNumber: 2)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._hastly != 0 {
        try visitor.visitSingularInt32Field(value: _storage._hastly, fieldNumber: 4)
      }
      if _storage._normally != 0 {
        try visitor.visitSingularInt32Field(value: _storage._normally, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TimeToBeat, rhs: Proto_TimeToBeat) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._completely != rhs_storage._completely {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._hastly != rhs_storage._hastly {return false}
        if _storage._normally != rhs_storage._normally {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_TitleResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".TitleResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "titles"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.titles)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.titles.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.titles, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_TitleResult, rhs: Proto_TitleResult) -> Bool {
    if lhs.titles != rhs.titles {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Title: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Title"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "createdAt"),
    3: .same(proto: "description"),
    4: .same(proto: "games"),
    5: .same(proto: "name"),
    6: .same(proto: "slug"),
    7: .same(proto: "updatedAt"),
    8: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _description_p: String = String()
    var _games: [Proto_Game] = []
    var _name: String = String()
    var _slug: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _createdAt = source._createdAt
      _description_p = source._description_p
      _games = source._games
      _name = source._name
      _slug = source._slug
      _updatedAt = source._updatedAt
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 3: try decoder.decodeSingularStringField(value: &_storage._description_p)
        case 4: try decoder.decodeRepeatedMessageField(value: &_storage._games)
        case 5: try decoder.decodeSingularStringField(value: &_storage._name)
        case 6: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 7: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 8: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 2)
      }
      if !_storage._description_p.isEmpty {
        try visitor.visitSingularStringField(value: _storage._description_p, fieldNumber: 3)
      }
      if !_storage._games.isEmpty {
        try visitor.visitRepeatedMessageField(value: _storage._games, fieldNumber: 4)
      }
      if !_storage._name.isEmpty {
        try visitor.visitSingularStringField(value: _storage._name, fieldNumber: 5)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 6)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 7)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 8)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Title, rhs: Proto_Title) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._description_p != rhs_storage._description_p {return false}
        if _storage._games != rhs_storage._games {return false}
        if _storage._name != rhs_storage._name {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_UserResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".UserResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "users"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.users)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.users.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.users, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_UserResult, rhs: Proto_UserResult) -> Bool {
    if lhs.users != rhs.users {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_User: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".User"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "battlenet"),
    3: .same(proto: "color"),
    4: .same(proto: "createdAt"),
    5: .same(proto: "discord"),
    6: .same(proto: "facebook"),
    7: .same(proto: "googlePlus"),
    8: .same(proto: "instagram"),
    9: .same(proto: "linkedin"),
    10: .same(proto: "origin"),
    11: .same(proto: "pinterest"),
    12: .same(proto: "presentation"),
    13: .same(proto: "reddit"),
    14: .same(proto: "role"),
    15: .same(proto: "slug"),
    16: .same(proto: "soundcloud"),
    17: .same(proto: "steam"),
    18: .same(proto: "twitch"),
    19: .same(proto: "twitter"),
    20: .same(proto: "updatedAt"),
    21: .same(proto: "uplay"),
    22: .same(proto: "url"),
    23: .same(proto: "username"),
    24: .same(proto: "youtube"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _battlenet: String = String()
    var _color: Proto_ColorColorEnum = .green
    var _createdAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _discord: String = String()
    var _facebook: String = String()
    var _googlePlus: String = String()
    var _instagram: String = String()
    var _linkedin: String = String()
    var _origin: String = String()
    var _pinterest: String = String()
    var _presentation: String = String()
    var _reddit: String = String()
    var _role: Proto_UserRoleEnum = .userRoleNull
    var _slug: String = String()
    var _soundcloud: String = String()
    var _steam: String = String()
    var _twitch: String = String()
    var _twitter: String = String()
    var _updatedAt: SwiftProtobuf.Google_Protobuf_Timestamp? = nil
    var _uplay: String = String()
    var _url: String = String()
    var _username: String = String()
    var _youtube: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _battlenet = source._battlenet
      _color = source._color
      _createdAt = source._createdAt
      _discord = source._discord
      _facebook = source._facebook
      _googlePlus = source._googlePlus
      _instagram = source._instagram
      _linkedin = source._linkedin
      _origin = source._origin
      _pinterest = source._pinterest
      _presentation = source._presentation
      _reddit = source._reddit
      _role = source._role
      _slug = source._slug
      _soundcloud = source._soundcloud
      _steam = source._steam
      _twitch = source._twitch
      _twitter = source._twitter
      _updatedAt = source._updatedAt
      _uplay = source._uplay
      _url = source._url
      _username = source._username
      _youtube = source._youtube
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularStringField(value: &_storage._battlenet)
        case 3: try decoder.decodeSingularEnumField(value: &_storage._color)
        case 4: try decoder.decodeSingularMessageField(value: &_storage._createdAt)
        case 5: try decoder.decodeSingularStringField(value: &_storage._discord)
        case 6: try decoder.decodeSingularStringField(value: &_storage._facebook)
        case 7: try decoder.decodeSingularStringField(value: &_storage._googlePlus)
        case 8: try decoder.decodeSingularStringField(value: &_storage._instagram)
        case 9: try decoder.decodeSingularStringField(value: &_storage._linkedin)
        case 10: try decoder.decodeSingularStringField(value: &_storage._origin)
        case 11: try decoder.decodeSingularStringField(value: &_storage._pinterest)
        case 12: try decoder.decodeSingularStringField(value: &_storage._presentation)
        case 13: try decoder.decodeSingularStringField(value: &_storage._reddit)
        case 14: try decoder.decodeSingularEnumField(value: &_storage._role)
        case 15: try decoder.decodeSingularStringField(value: &_storage._slug)
        case 16: try decoder.decodeSingularStringField(value: &_storage._soundcloud)
        case 17: try decoder.decodeSingularStringField(value: &_storage._steam)
        case 18: try decoder.decodeSingularStringField(value: &_storage._twitch)
        case 19: try decoder.decodeSingularStringField(value: &_storage._twitter)
        case 20: try decoder.decodeSingularMessageField(value: &_storage._updatedAt)
        case 21: try decoder.decodeSingularStringField(value: &_storage._uplay)
        case 22: try decoder.decodeSingularStringField(value: &_storage._url)
        case 23: try decoder.decodeSingularStringField(value: &_storage._username)
        case 24: try decoder.decodeSingularStringField(value: &_storage._youtube)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if !_storage._battlenet.isEmpty {
        try visitor.visitSingularStringField(value: _storage._battlenet, fieldNumber: 2)
      }
      if _storage._color != .green {
        try visitor.visitSingularEnumField(value: _storage._color, fieldNumber: 3)
      }
      if let v = _storage._createdAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 4)
      }
      if !_storage._discord.isEmpty {
        try visitor.visitSingularStringField(value: _storage._discord, fieldNumber: 5)
      }
      if !_storage._facebook.isEmpty {
        try visitor.visitSingularStringField(value: _storage._facebook, fieldNumber: 6)
      }
      if !_storage._googlePlus.isEmpty {
        try visitor.visitSingularStringField(value: _storage._googlePlus, fieldNumber: 7)
      }
      if !_storage._instagram.isEmpty {
        try visitor.visitSingularStringField(value: _storage._instagram, fieldNumber: 8)
      }
      if !_storage._linkedin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._linkedin, fieldNumber: 9)
      }
      if !_storage._origin.isEmpty {
        try visitor.visitSingularStringField(value: _storage._origin, fieldNumber: 10)
      }
      if !_storage._pinterest.isEmpty {
        try visitor.visitSingularStringField(value: _storage._pinterest, fieldNumber: 11)
      }
      if !_storage._presentation.isEmpty {
        try visitor.visitSingularStringField(value: _storage._presentation, fieldNumber: 12)
      }
      if !_storage._reddit.isEmpty {
        try visitor.visitSingularStringField(value: _storage._reddit, fieldNumber: 13)
      }
      if _storage._role != .userRoleNull {
        try visitor.visitSingularEnumField(value: _storage._role, fieldNumber: 14)
      }
      if !_storage._slug.isEmpty {
        try visitor.visitSingularStringField(value: _storage._slug, fieldNumber: 15)
      }
      if !_storage._soundcloud.isEmpty {
        try visitor.visitSingularStringField(value: _storage._soundcloud, fieldNumber: 16)
      }
      if !_storage._steam.isEmpty {
        try visitor.visitSingularStringField(value: _storage._steam, fieldNumber: 17)
      }
      if !_storage._twitch.isEmpty {
        try visitor.visitSingularStringField(value: _storage._twitch, fieldNumber: 18)
      }
      if !_storage._twitter.isEmpty {
        try visitor.visitSingularStringField(value: _storage._twitter, fieldNumber: 19)
      }
      if let v = _storage._updatedAt {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 20)
      }
      if !_storage._uplay.isEmpty {
        try visitor.visitSingularStringField(value: _storage._uplay, fieldNumber: 21)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 22)
      }
      if !_storage._username.isEmpty {
        try visitor.visitSingularStringField(value: _storage._username, fieldNumber: 23)
      }
      if !_storage._youtube.isEmpty {
        try visitor.visitSingularStringField(value: _storage._youtube, fieldNumber: 24)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_User, rhs: Proto_User) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._battlenet != rhs_storage._battlenet {return false}
        if _storage._color != rhs_storage._color {return false}
        if _storage._createdAt != rhs_storage._createdAt {return false}
        if _storage._discord != rhs_storage._discord {return false}
        if _storage._facebook != rhs_storage._facebook {return false}
        if _storage._googlePlus != rhs_storage._googlePlus {return false}
        if _storage._instagram != rhs_storage._instagram {return false}
        if _storage._linkedin != rhs_storage._linkedin {return false}
        if _storage._origin != rhs_storage._origin {return false}
        if _storage._pinterest != rhs_storage._pinterest {return false}
        if _storage._presentation != rhs_storage._presentation {return false}
        if _storage._reddit != rhs_storage._reddit {return false}
        if _storage._role != rhs_storage._role {return false}
        if _storage._slug != rhs_storage._slug {return false}
        if _storage._soundcloud != rhs_storage._soundcloud {return false}
        if _storage._steam != rhs_storage._steam {return false}
        if _storage._twitch != rhs_storage._twitch {return false}
        if _storage._twitter != rhs_storage._twitter {return false}
        if _storage._updatedAt != rhs_storage._updatedAt {return false}
        if _storage._uplay != rhs_storage._uplay {return false}
        if _storage._url != rhs_storage._url {return false}
        if _storage._username != rhs_storage._username {return false}
        if _storage._youtube != rhs_storage._youtube {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_WebsiteResult: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".WebsiteResult"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "websites"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeRepeatedMessageField(value: &self.websites)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.websites.isEmpty {
      try visitor.visitRepeatedMessageField(value: self.websites, fieldNumber: 1)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_WebsiteResult, rhs: Proto_WebsiteResult) -> Bool {
    if lhs.websites != rhs.websites {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}

extension Proto_Website: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Website"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "id"),
    2: .same(proto: "category"),
    3: .same(proto: "game"),
    4: .same(proto: "trusted"),
    5: .same(proto: "url"),
  ]

  fileprivate class _StorageClass {
    var _id: UInt64 = 0
    var _category: Proto_WebsiteCategoryEnum = .websiteCategoryNull
    var _game: Proto_Game? = nil
    var _trusted: Bool = false
    var _url: String = String()

    static let defaultInstance = _StorageClass()

    private init() {}

    init(copying source: _StorageClass) {
      _id = source._id
      _category = source._category
      _game = source._game
      _trusted = source._trusted
      _url = source._url
    }
  }

  fileprivate mutating func _uniqueStorage() -> _StorageClass {
    if !isKnownUniquelyReferenced(&_storage) {
      _storage = _StorageClass(copying: _storage)
    }
    return _storage
  }

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    _ = _uniqueStorage()
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      while let fieldNumber = try decoder.nextFieldNumber() {
        switch fieldNumber {
        case 1: try decoder.decodeSingularUInt64Field(value: &_storage._id)
        case 2: try decoder.decodeSingularEnumField(value: &_storage._category)
        case 3: try decoder.decodeSingularMessageField(value: &_storage._game)
        case 4: try decoder.decodeSingularBoolField(value: &_storage._trusted)
        case 5: try decoder.decodeSingularStringField(value: &_storage._url)
        default: break
        }
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    try withExtendedLifetime(_storage) { (_storage: _StorageClass) in
      if _storage._id != 0 {
        try visitor.visitSingularUInt64Field(value: _storage._id, fieldNumber: 1)
      }
      if _storage._category != .websiteCategoryNull {
        try visitor.visitSingularEnumField(value: _storage._category, fieldNumber: 2)
      }
      if let v = _storage._game {
        try visitor.visitSingularMessageField(value: v, fieldNumber: 3)
      }
      if _storage._trusted != false {
        try visitor.visitSingularBoolField(value: _storage._trusted, fieldNumber: 4)
      }
      if !_storage._url.isEmpty {
        try visitor.visitSingularStringField(value: _storage._url, fieldNumber: 5)
      }
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Proto_Website, rhs: Proto_Website) -> Bool {
    if lhs._storage !== rhs._storage {
      let storagesAreEqual: Bool = withExtendedLifetime((lhs._storage, rhs._storage)) { (_args: (_StorageClass, _StorageClass)) in
        let _storage = _args.0
        let rhs_storage = _args.1
        if _storage._id != rhs_storage._id {return false}
        if _storage._category != rhs_storage._category {return false}
        if _storage._game != rhs_storage._game {return false}
        if _storage._trusted != rhs_storage._trusted {return false}
        if _storage._url != rhs_storage._url {return false}
        return true
      }
      if !storagesAreEqual {return false}
    }
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
